{"version":3,"sources":["serverService/lobbyService.ts","material-ui-variables.ts","constants.ts","hooky/useTypedSelector.ts","components/Header/Header.tsx","assets/icons/poker-cards.svg","components/LargeLogo/LargeLogo.tsx","store/chatSlice.ts","store/currentUserSlice.ts","store/gameSlice.ts","store/roomSlice.ts","store/settingsSlice.ts","store/votingSlice.ts","tool/hashFunction.ts","serverService/serverService.ts","components/popUps/RegisterSuccessPopup/RegisterSuccessPopup.tsx","components/Base/PopUpLinearProgress/PopUpLinearProgress.tsx","components/Base/FailPopUp/FailPopUp.tsx","components/popUps/RegisterPopup/RegisterPopup.tsx","components/popUps/LogInPopup/LogInPopup.tsx","components/pages/StartPage/StartPage.tsx","components/pages/WelcomePage/WelcomePage.tsx","clientService/clientService.ts","components/pages/Lobby/PlayerCard/PlayerCard.tsx","components/Base/Issue/Issue.tsx","components/pages/GamePage/GameIssue/GameIssue.tsx","tool/dragAndDrop.ts","components/Chat/ChatMessage/ChatMessage.tsx","components/Chat/TechnicalMessage/TechnicalMessage.tsx","components/Chat/Chat.tsx","components/pages/Lobby/Queue/queuePerson.tsx","components/pages/Lobby/Queue/queue.tsx","components/GameCard/GameCard.tsx","components/pages/GamePage/GameSideBar/GameSideBarItem.tsx","components/pages/GamePage/GameSideBar/GameSideBar.tsx","components/Base/RoundTime/RoundTime.tsx","components/RoundTimePlayable/RoundTimePlayable.tsx","components/Base/IssuePopup/IssuePopup.tsx","components/CreateIssuePopup/CreateIssuePopup.tsx","components/CreateIssue/CreateIssue.tsx","components/pages/AboutPage/AboutPage.tsx","components/statistics/statisticsItem.tsx","components/statistics/statistics.tsx","components/Base/PrivateRoute.tsx","components/KickPlayer/KickPlayer.tsx","components/KickPlayer/KickPlayerContainer.tsx","components/pages/Lobby/IssueNonEditable/IssueNonEditable.tsx","components/pages/Lobby/LobbyGame/LobbyMain.tsx","components/Base/SuccessSnackBar/SuccessSnackBar.tsx","components/pages/Lobby/CardEditable/CardEditable.tsx","components/pages/Lobby/CardPopup/CardPopup.tsx","components/pages/Lobby/CardSettings/CardCreator/CreateCardPopup/CreateCardPopup.tsx","components/pages/Lobby/CardSettings/CardCreator/CardCreator.tsx","components/pages/Lobby/CardSettings/CardSettings.tsx","components/RoundTimeEditable/RoundTimeEditable.tsx","components/Settings/GameSettings/GameSettings.tsx","components/Settings/Settings.tsx","components/pages/Lobby/LobbyStart/Lobby.tsx","AppRouter.tsx","components/pages/GamePage/Game/Game.tsx","components/pages/StatisticsPage/StatisticsPage.tsx","assets/icons/rsschool.svg","components/Footer/Footer.tsx","App.tsx","reportWebVitals.js","store/rootReducer.ts","index.tsx"],"names":["wss","lobbyDispatch","lobbyRouter","theme","createTheme","breakpoints","values","phone","tablet","lap","desk","widescreen","fullhd","palette","primary","main","secondary","avatar","BASE_URL","LOGIN_POPUP_FIELDS","REGISTER_POPUP_FIELDS","name","title","errorMessage","type","REGISTER_POPUP_FIELDS_DEFAULT_VALUES","login","password","firstName","lastName","jobPosition","ISSUE_DEFAULT_VALUES","priority","link","id","APP_AUTHORS_GITHUB_USERNAME","useTypedSelector","useSelector","Header","state","userInfo","isLogin","className","to","Avatar","src","children","length","alt","LargeLogo","pokerCardsImg","initialState","chatSlice","createSlice","reducers","newMessage","action","push","payload","resetChat","actions","currentUserSlice","isScrum","setUserInfo","setScrumStatus","setCurrentUserScrumStatus","isVoting","issuesInfo","players","gameSlice","setGame","resetGame","queue","inGame","roomId","roomUrl","isPlaying","amountAgreeWithKick","issues","scrumInfo","roomSlice","setRoomInfo","resetRoomInfo","roundTime","timerNeeded","autoTurn","masterAsPlayer","scoreType","shortScoreType","cards","settingsSlice","setSettings","setTimer","addCard","updateCard","index","findIndex","cardValue","currentValue","value","setCardType","resetSettings","votingSlice","updateVoits","resetVoits","RoomMessageHandler","message","reason","JSON","parse","payLoad","onChatMessage","alert","gameInfo","onGameUpdate","onYouAreKicked","onStartIssueVote","LobbyService","connectToRoom","userWss","connectInfo","send","makeWSRequestString","onmessage","ev","data","sendChatMessage","messageInfo","request","makeNewRoom","setLobbyDispatch","dispatch","disconectFromRoom","disconnectInfo","sendIssueToRoom","issue","updateIssueInRoom","deleteIssue","issueId","sendKickOfferToRoom","kickInfo","sendKickConclusionToRoom","conclusion","kickedPlayerLogin","makeGameInRoom","movePlayerInRoom","userLogin","setLobbyRouter","router","sendChoiceToGame","choiceInfo","startVoteIssueInRoom","stopVoteIssueInRoom","selectIssueInRoom","stopGameInRoom","resetVoteIssueInRoom","setSettingsInRoom","settings","payLoadObj","stringify","hashCode","s","split","reduce","a","b","charCodeAt","url","wsUrl","regInfo","fetch","body","headers","method","then","res","json","response","signInInfo","console","log","ServerService","setDispatch","setRouter","registerNewUser","signInUser","connectionInfo","WebSocket","onopen","disconect","makeIssue","String","updateIssue","kickPlayer","setKickConclusion","startGame","stopGame","movePlayerFromQueueToGame","makeChoice","startVoteIssue","stopVoteIssue","selectIssue","resetVoteIssue","RegisterSuccessPopup","props","open","onChangeRegisterSuccessPopupState","useHistory","closePopup","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","Divider","DialogActions","Button","autoFocus","onClick","PopUpLinearProgress","loading","LinearProgress","FailPopUp","onChangeFailPopUpState","description","Alert","variant","severity","AlertTitle","RegisterPopup","onChangeRegisterPopupState","useDispatch","useState","setLoading","setAvatar","fieldsValues","setFieldsValues","errors","setErrors","openRegisterSuccessPopup","setOpenRegisterSuccessPopup","openFailPopup","setOpenFailPopup","HandleConfirmRegistration","isSuccess","addFieldErrorMessage","fieldProps","includes","updateFieldValue","e","target","regex","test","newErrors","filter","error","checkValidation","map","field","TextField","defaultValue","onChange","helperText","size","Input","file","files","reader","FileReader","onload","result","toString","readAsDataURL","changeAvatar","disabled","color","LoginPopup","onChangeLogInPopupState","HandleConfirmLogin","handleFieldChange","fieldName","label","StartPage","registerPopupOpen","setRegisterPopupOpen","LogInPopupOpen","setLogInPopupOpen","makeUserInfoCopy","currentUserInfo","clientService","getUserByLogin","room","userlogin","find","player","PlayerCard","letterAvatar","currentUserLogin","store","roomInfo","cardOwner","undefined","onKickBtnClick","kickVoting","whoKick","amountAgree","isVoiting","whoOffer","btn","style","width","height","IconButton","Issue","classes","GameIssue","score","isActive","href","handleDragAndDrop","event","chat","classList","contains","shiftX","clientX","getBoundingClientRect","left","shiftY","clientY","top","moveAt","pageX","pageY","document","addEventListener","onMouseMove","onmouseup","removeEventListener","ondragstart","ChatMessage","Tooltip","textAlign","TechnicalMessage","Chat","currentUser","querySelector","toggle","onMouseDown","isTechnicalMessage","placeholder","targetInput","closest","makeNewMessage","QueuePerson","Queue","QueueOutlined","playerInQ","GameCard","game","currentIssueInfo","isSelected","GameSideBarItem","userScore","votes","vote","GameSideBar","currentIssue","issueInfo","RoundTime","RoundTimePlayable","time","seconds","setSeconds","useEffect","update","setTimeout","Math","floor","exactSeconds","getSeconds","IssuePopup","onChangePopupState","setTitle","setLink","setPriority","FormControl","Select","MenuItem","Date","now","CreateIssuePopup","CreateIssue","openPopup","setOpenPopup","AboutPage","StatisticsItem","cardInfo","determPart","currentScore","currentVotesAmount","forEach","Statistics","PrivateRoute","component","authed","rest","Component","render","routeProps","pathname","from","location","KickPlayerItem","canCurrentUserVotin","KickPlayerContainer","voting","IssueNonEdiitable","LobbyMain","SuccessSnackBar","onSetOpen","text","Snackbar","autoHideDuration","EditableGameCard","CardPopup","setValue","CreateCardPopup","CardCreator","AddCircleOutline","fontSize","CardSettings","card","RoundTimeEditable","minutes","setMinutes","changeTime","changeState","min","max","GameSettings","MasterAsPlayer","SetMasterAsPlayer","AutoTurn","SetAutoTurn","TimerNeeded","SetTimerNeeded","ScoreType","setScoreType","ShortScoreType","setShortScoreType","openLogInSuccessSnackBar","setOpenLogInSuccessSnackBar","Switch","Settings","Lobby","justifyContent","exact","path","ROUTES","setUrl","Grid","container","alignItems","userInfoCopy","urlStr","urlArr","defineIdfromUrl","PlayerInQueue","setPlayerInQueue","i","determIsPlayerInQueue","ussueInfo","issusInfo","AppRouter","Footer","rel","rsschool","username","App","user","ThemeProvider","CssBaseline","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","configureStore","reducer","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.dc66cb97.chunk.js","sourcesContent":["import { BASE_URL } from \"../constants\";\r\nimport { newMessage, resetChat } from \"../store/chatSlice\";\r\nimport { setCurrentUserScrumStatus, setScrumStatus } from \"../store/currentUserSlice\";\r\nimport { resetGame, setGame } from \"../store/gameSlice\";\r\nimport { resetRoomInfo, setRoomInfo } from \"../store/roomSlice\";\r\nimport { resetSettings, setSettings, SettingsModel } from \"../store/settingsSlice\";\r\nimport { resetVoits, updateVoits } from \"../store/votingSlice\";\r\nimport { ChatMessageInfo } from \"./models/chatMessageInfoModel\";\r\nimport { ChoiceModel } from \"./models/choiceModel\";\r\nimport { ConnectUserToWS } from \"./models/connectUserToWSModel\";\r\nimport { DisconectModel } from \"./models/disconnectModel\";\r\nimport { GameModel } from \"./models/gameModel\";\r\nimport { IssueModel } from \"./models/issueModel\";\r\nimport { Room } from \"./models/roomModel\";\r\nimport { UserInfo } from \"./models/userInfoModel\";\r\nimport { VotingModel } from \"./models/votingModel\";\r\nimport { WSRequest } from \"./models/WSRequestModel\";\r\nimport { WSResponse } from \"./models/WSResponseModel\";\r\n\r\nlet wss:WebSocket;\r\nlet lobbyDispatch:any;\r\nlet lobbyRouter:any;\r\n\r\nfunction setLobbyDispatch(dispatch:any) {\r\n  lobbyDispatch = dispatch;\r\n}\r\n\r\nfunction setLobbyRouter(router:any) {\r\n  lobbyRouter = router;\r\n}\r\n\r\nfunction RoomMessageHandler(message:string) {\r\n  const type = (JSON.parse(message) as WSResponse).type;\r\n  const payLoad = (JSON.parse(message) as WSResponse).payLoad;\r\n\r\n  const onUpdateRoomStore = (updadedRoom: Room) => {\r\n    lobbyDispatch(setRoomInfo(updadedRoom));\r\n  }\r\n  \r\n  const onSuccessRoomBuild = (roomInfo: Room) => {\r\n    lobbyDispatch(setRoomInfo(roomInfo));\r\n    lobbyDispatch(setCurrentUserScrumStatus());\r\n    lobbyDispatch(resetVoits());\r\n    lobbyDispatch(resetSettings());\r\n  }\r\n\r\n  const onChatMessage = (message:ChatMessageInfo) => {\r\n    lobbyDispatch(newMessage(message));\r\n  }\r\n\r\n  const onGameStart = (gameInfo:GameModel) => {\r\n    lobbyDispatch(setGame(gameInfo));\r\n    lobbyRouter.push(`${BASE_URL}/game`);\r\n  }\r\n\r\n  const onGameUpdate = (gameInfo:GameModel) => {\r\n    lobbyDispatch(setGame(gameInfo));\r\n  }\r\n\r\n  const onYouAreKicked = (message:string) => {\r\n    lobbyRouter.push(`${BASE_URL}/welcomePage`);\r\n    lobbyDispatch(resetRoomInfo());\r\n    alert(message);\r\n  }\r\n\r\n  const onStopGame = (reason:string) => {\r\n/*     lobbyRouter.push(\"/lobbyStart\"); */\r\n    lobbyRouter.push(`${BASE_URL}/statistics`);\r\n/*     lobbyDispatch(resetGame()); */\r\n    alert(reason);\r\n  }\r\n\r\n  const onStartIssueVote = (gameInfo:GameModel) => {\r\n    lobbyDispatch(setGame(gameInfo));\r\n  }\r\n\r\n  const onSetSettings = (settings:SettingsModel) => {\r\n    lobbyDispatch(setSettings(settings));\r\n  }\r\n\r\n  const onToggleToGame = () => {\r\n    lobbyRouter.push(`${BASE_URL}/game`);\r\n  }\r\n\r\n  const onUpdateKickVotes = (votes:Array<VotingModel>) => {\r\n    lobbyDispatch(updateVoits(votes));\r\n  }\r\n\r\n  switch(type) {\r\n    case \"UPDATE_ROOM\": \r\n      onUpdateRoomStore(payLoad);\r\n      break;\r\n\r\n    case \"ROOM_BUILD\":\r\n      onSuccessRoomBuild(payLoad);\r\n      break;\r\n      \r\n    case \"CHAT_MESSAGE\":\r\n      onChatMessage(payLoad);\r\n      break;\r\n\r\n    case \"START_GAME\":\r\n      onGameStart(payLoad);\r\n      break;\r\n    \r\n    case \"STOP_GAME\":\r\n      onStopGame(payLoad);\r\n      break;\r\n\r\n    case \"UPDATE_GAME\":\r\n      onGameUpdate(payLoad);\r\n      break;\r\n    \r\n    case \"YOU_ARE_KICKED\":\r\n      onYouAreKicked(payLoad);\r\n      break;\r\n    \r\n    case \"START_ISSUE_VOTE\":\r\n      onStartIssueVote(payLoad);\r\n      break;\r\n    \r\n    case \"SET_SETTINGS\":\r\n      onSetSettings(payLoad);\r\n      break;\r\n\r\n    case \"TOGGLE_TO_GAME\":\r\n      onToggleToGame();\r\n      break;\r\n\r\n    case \"UPDATE_KICK_VOTES\":\r\n      onUpdateKickVotes(payLoad);\r\n      break;\r\n  }  \r\n}\r\n\r\n\r\nfunction makeNewRoom(userWss:WebSocket, scrumInfo:UserInfo) {\r\n  lobbyDispatch(resetChat());\r\n  lobbyDispatch(resetRoomInfo());\r\n  lobbyDispatch(resetGame());\r\n  lobbyDispatch(resetSettings());\r\n  wss = userWss;\r\n  const request = makeWSRequestString(\"MAKE_NEW_LOBBY\", scrumInfo);\r\n  wss.send(request);\r\n  \r\n  wss.onmessage = (ev) => { RoomMessageHandler(ev.data) };\r\n}\r\n\r\nfunction connectToRoom(userWss:WebSocket, connectInfo:ConnectUserToWS) {\r\n  lobbyDispatch(resetChat());\r\n  lobbyDispatch(resetRoomInfo());\r\n  lobbyDispatch(resetGame());\r\n  lobbyDispatch(setScrumStatus(false));\r\n  lobbyDispatch(resetVoits());\r\n  wss = userWss;\r\n  wss.send(makeWSRequestString(\"CONNECT_TO_ROOM\", connectInfo));\r\n\r\n  wss.onmessage = (ev) => { RoomMessageHandler(ev.data); };\r\n}\r\n\r\nfunction disconectFromRoom(disconnectInfo:DisconectModel) {\r\n  const request = makeWSRequestString('DISCONNECT', disconnectInfo);\r\n  wss.send(request);\r\n}\r\n\r\nfunction sendChatMessage(messageInfo:ChatMessageInfo) {\r\n  const request = makeWSRequestString(\"CHAT_MESSAGE\", messageInfo);\r\n  wss.send(request);\r\n}\r\n\r\nfunction sendIssueToRoom(issue:IssueModel) {\r\n  const request = makeWSRequestString(\"NEW_ISSUE\", issue);\r\n  wss.send(request);\r\n}\r\n\r\nfunction updateIssueInRoom(issue:IssueModel) {\r\n  const request = makeWSRequestString(\"UPDATE_ISSUE\", issue);\r\n  wss.send(request);\r\n}\r\n\r\nfunction deleteIssue(issueId:string) {\r\n  const request = makeWSRequestString(\"DELETE_ISSUE\", issueId);\r\n  wss.send(request);\r\n}\r\n\r\nfunction sendKickOfferToRoom(kickInfo: VotingModel) {\r\n  const request = makeWSRequestString(\"KICK_PLAYER_OFFER\", kickInfo);\r\n  wss.send(request);\r\n}\r\n\r\nfunction sendKickConclusionToRoom(conclusion:boolean, login:string, kickedPlayerLogin?:string) {\r\n    const request = makeWSRequestString(\"AGREE_WITH_KICK\", {kickedPlayerLogin, login, conclusion});\r\n    wss.send(request);\r\n}\r\n\r\nfunction makeGameInRoom() {\r\n  //!11111\r\n  const request = makeWSRequestString(\"MAKE_NEW_GAME\", 'make new game');\r\n  wss.send(request);\r\n}\r\n\r\nfunction movePlayerInRoom(userLogin:string) {\r\n  const request = makeWSRequestString(\"MOVE_FROM_QUEUE\", userLogin);\r\n  wss.send(request);\r\n}\r\n\r\nfunction sendChoiceToGame(choiceInfo:ChoiceModel) {\r\n  const request = makeWSRequestString(\"USER_MAKE_CHOICE\", choiceInfo);\r\n  wss.send(request);\r\n}\r\n\r\nfunction selectIssueInRoom(issueId:string) {\r\n  const request = makeWSRequestString(\"SELECT_ISSUE\", issueId);\r\n  wss.send(request);\r\n}\r\n\r\nfunction startVoteIssueInRoom(issueId:string) {\r\n  const request = makeWSRequestString(\"START_ISSUE_VOTE\", issueId);\r\n  wss.send(request);\r\n}\r\n\r\nfunction stopVoteIssueInRoom(issueId:string) {\r\n  const request = makeWSRequestString(\"STOP_ISSUE_VOTE\", issueId);\r\n  wss.send(request);\r\n}\r\n\r\nfunction resetVoteIssueInRoom(issueId:string) {\r\n  const request = makeWSRequestString(\"RESET_ISSUE_VOTE\", issueId);\r\n  wss.send(request);\r\n}\r\n\r\nfunction stopGameInRoom() {\r\n  const request = makeWSRequestString(\"STOP_GAME\", \"master stopped the game\");\r\n  wss.send(request);\r\n}\r\n\r\nfunction setSettingsInRoom(settings:SettingsModel) {\r\n  const request = makeWSRequestString(\"SET_SETTINGS\", settings);\r\n  wss.send(request);\r\n}\r\n\r\nconst LobbyService = {\r\n  connectToRoom,\r\n  sendChatMessage,\r\n  makeNewRoom,\r\n  setLobbyDispatch,\r\n  disconectFromRoom,\r\n  sendIssueToRoom,\r\n  updateIssueInRoom,\r\n  deleteIssue,\r\n  sendKickOfferToRoom,\r\n  sendKickConclusionToRoom,\r\n  makeGameInRoom,\r\n  movePlayerInRoom,\r\n  setLobbyRouter,\r\n  sendChoiceToGame,\r\n  startVoteIssueInRoom,\r\n  stopVoteIssueInRoom,\r\n  selectIssueInRoom,\r\n  stopGameInRoom,\r\n  resetVoteIssueInRoom,\r\n  setSettingsInRoom,\r\n}\r\nexport default LobbyService;\r\n\r\n\r\nfunction makeWSRequestString(type: string, payLoadObj:any) {;\r\n  const request: WSRequest = {\r\n    type: type,\r\n    payLoad: payLoadObj\r\n  }\r\n\r\n  return JSON.stringify(request);\r\n}","import { createTheme } from '@material-ui/core';\r\n\r\ndeclare module \"@material-ui/core/styles/createBreakpoints\" {\r\n  interface BreakpointOverrides {\r\n    xs: false;\r\n    sm: false;\r\n    md: false;\r\n    lg: false;\r\n    xl: false;\r\n    'phone-sm': true;\r\n    'phone-md': true;\r\n    'phone-lg': true;\r\n    'phone-xl': true;\r\n    phone: true;\r\n    tablet: true;\r\n    lap: true;\r\n    desk: true;\r\n    widescreen: true;\r\n    fullhd: true;\r\n  }\r\n}\r\n\r\ndeclare module '@material-ui/core/styles/createPalette' {\r\n  interface PaletteOptions {\r\n    avatar: string;\r\n  }\r\n}\r\n\r\nexport const theme = createTheme({\r\n  breakpoints: {\r\n    values: {\r\n      'phone-sm': 320,\r\n      'phone-md': 375,\r\n      'phone-lg': 425,\r\n      'phone-xl': 480,\r\n      phone: 640,\r\n      tablet: 768,\r\n      lap: 1024,\r\n      desk: 1200,\r\n      widescreen: 1440,\r\n      fullhd: 1920\r\n    },\r\n  },\r\n  palette: {\r\n    primary: {\r\n      main: '#2b3a67'\r\n    },\r\n    secondary: {\r\n      main: '#66999b'\r\n    },\r\n    avatar: '#60dabf'\r\n  }\r\n});\r\n\r\nexport const bp = theme.breakpoints;","export const BASE_URL = '/planning-poker';\r\n\r\nexport const LOGIN_POPUP_FIELDS = ['login', 'password'];\r\n\r\nexport const REGISTER_POPUP_FIELDS = [\r\n  {\r\n    name: 'login',\r\n    title: 'login',\r\n    errorMessage: 'Login can\\'t be shorter than 3 chars and contain spaces.'\r\n  },\r\n  {\r\n    name: 'password',\r\n    title: 'password',\r\n    type: 'password'\r\n  },\r\n  {\r\n    name: 'firstName',\r\n    title: 'first name',\r\n  },\r\n  {\r\n    name: 'lastName',\r\n    title: 'last name',\r\n  },\r\n  {\r\n    name: 'jobPosition',\r\n    title: 'job position',\r\n  }\r\n];\r\n\r\nexport const REGISTER_POPUP_FIELDS_DEFAULT_VALUES = {\r\n  login: '',\r\n  password: '',\r\n  firstName: '',\r\n  lastName: '',\r\n  jobPosition: '',\r\n  avatar: ''\r\n};\r\n\r\nexport const ISSUE_DEFAULT_VALUES = {\r\n  title: '',\r\n  priority: 'low',\r\n  link: '',\r\n  id: ''\r\n};\r\n\r\nexport const APP_AUTHORS_GITHUB_USERNAME = ['WFZ1', 'JxmJuice', 'FURY-PERSON', 'bdvx'];","import { TypedUseSelectorHook, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../store/rootReducer\";\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector","import { Avatar } from \"@material-ui/core\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { BASE_URL } from \"../../constants\";\r\nimport { useTypedSelector } from \"../../hooky/useTypedSelector\";\r\nimport \"./Header.scss\";\r\n\r\nconst Header = () => {\r\n  const { isLogin, avatar, firstName } = useTypedSelector((state) => state.userInfo);\r\n\r\n  const changeStringAvatar = (): string | null => {\r\n    if (!firstName) return null;\r\n  \r\n    return (firstName.length) > 1 ? `${firstName[0]}${firstName[firstName.length - 1]}` : `${firstName[0]}`;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <header className=\"Header\">\r\n        <div className=\"Header_wrapper\">\r\n          <div className=\"Header_logo\"></div>\r\n          <NavLink to={ `${BASE_URL}/welcomePage` } className=\"Header_link\">\r\n            Home\r\n          </NavLink>\r\n          <NavLink to={ `${BASE_URL}/about` } className=\"Header_link\">\r\n            About\r\n          </NavLink>\r\n\r\n          { isLogin && \r\n            <Avatar src={ avatar } children={ changeStringAvatar() } alt=\"Avatar\" />\r\n          }\r\n        </div>\r\n      </header>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","export default __webpack_public_path__ + \"static/media/poker-cards.c0d532c4.svg\";","import './LargeLogo.scss';\r\nimport { FC } from 'react';\r\nimport pokerCardsImg from '../../assets/icons/poker-cards.svg';\r\n\r\nexport const LargeLogo: FC = () => {\r\n  return (\r\n    <div className=\"largeLogo\">\r\n      <img src={pokerCardsImg} alt=\"Poker cards\" />\r\n\r\n      <div className=\"largeLogo__title\">\r\n        <span>Poker</span>\r\n        <span>Planning</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { TechnicalMessageProps } from \"../components/Chat/TechnicalMessage/TechnicalMessage\";\r\nimport { ChatMessageInfo } from \"../serverService/models/chatMessageInfoModel\";\r\n\r\nconst initialState: Array<ChatMessageInfo | TechnicalMessageProps> = []\r\n\r\nconst chatSlice = createSlice({\r\n  name: \"chatSlice\",\r\n  initialState,\r\n  reducers: {\r\n    newMessage(state, action) {\r\n      state.push(action.payload);\r\n    },\r\n    resetChat() {\r\n      return initialState;\r\n    }\r\n  }\r\n})\r\n\r\nexport default chatSlice.reducer;\r\nexport const {newMessage, resetChat} = chatSlice.actions;","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { UserInfo } from \"../serverService/models/userInfoModel\";\r\n\r\nconst initialState: UserInfo = {\r\n  firstName: '',\r\n  lastName: '',\r\n  jobPosition: '',\r\n  login: '',\r\n  avatar: '',\r\n  isLogin: false,\r\n  isScrum: false\r\n}\r\n\r\nconst currentUserSlice = createSlice({\r\n  name: \"currentUserStore\",\r\n  initialState,\r\n  reducers: {\r\n    setUserInfo(state, action) {\r\n      return action.payload;\r\n    },\r\n    setScrumStatus(state, action) {\r\n      state.isScrum = action.payload;\r\n    },\r\n    setCurrentUserScrumStatus(state) {\r\n      state.isScrum = true;\r\n    }\r\n  }\r\n})\r\n\r\nexport default currentUserSlice.reducer;\r\nexport const {setUserInfo, setScrumStatus, setCurrentUserScrumStatus} = currentUserSlice.actions;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { GameModel } from \"../serverService/models/gameModel\";\r\n\r\nconst initialState:GameModel = {\r\n  isVoting:false,\r\n  issuesInfo: [],\r\n  players: [],\r\n}\r\n\r\nconst gameSlice = createSlice({\r\n  name: \"gameSlice\",\r\n  initialState,\r\n  reducers: {\r\n    setGame(state, action) {\r\n      return action.payload;\r\n    },\r\n    resetGame() {\r\n      return initialState;\r\n    }\r\n  }\r\n})\r\n\r\nexport default gameSlice.reducer;\r\nexport const {setGame, resetGame} = gameSlice.actions;","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { Room } from \"../serverService/models/roomModel\";\r\n\r\nconst initialState: Room = {\r\n  players: [],\r\n  queue: [],\r\n  inGame: [],\r\n  roomId: '',\r\n  roomUrl: '',\r\n  isPlaying: false,\r\n  isVoting:false,\r\n  amountAgreeWithKick: 1,\r\n  issues: [],\r\n  scrumInfo: {\r\n    firstName: '',\r\n    isScrum: true,\r\n    jobPosition: '',\r\n    lastName: '',\r\n    login: '',\r\n    avatar: ''\r\n  }\r\n}\r\n\r\nconst roomSlice = createSlice({\r\n  name: \"roomSlice\",\r\n  initialState,\r\n  reducers: {\r\n    setRoomInfo(state, action) {\r\n      return action.payload;\r\n    },\r\n    resetRoomInfo() {\r\n      return initialState;\r\n    }\r\n  }\r\n})\r\n\r\nexport default roomSlice.reducer;\r\nexport const {setRoomInfo, resetRoomInfo} = roomSlice.actions;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { VotingModel } from \"../serverService/models/votingModel\";\r\n\r\nexport interface SettingsModel {\r\n  roundTime:number,\r\n  timerNeeded: boolean,\r\n  autoTurn: boolean,\r\n  masterAsPlayer: boolean,\r\n  scoreType: string,\r\n  shortScoreType: string,\r\n  cards: Array<string>\r\n}\r\n\r\nconst initialState:SettingsModel = {\r\n  roundTime: 40,\r\n  timerNeeded: false,\r\n  autoTurn: false,\r\n  masterAsPlayer: false,\r\n  scoreType: \"Story Points\",\r\n  shortScoreType: \"SP\",\r\n  cards: [\r\n    \"1\",\"2\",\"3\",\"5\",\"8\",\"13\",\"21\",\"inf\"\r\n  ]\r\n}\r\n\r\nconst settingsSlice = createSlice({\r\n  name: \"settingsSlice\",\r\n  initialState,\r\n  reducers: {\r\n    setSettings(state, action) {\r\n      return action.payload;\r\n    },\r\n    setTimer(state, action) {\r\n      state.roundTime = action.payload;\r\n    },\r\n    addCard(state, action) {\r\n      state.cards.push(action.payload);\r\n    },\r\n    updateCard(state, action) {\r\n      const index = state.cards.findIndex((cardValue) => cardValue === action.payload.currentValue)\r\n      if(index) {\r\n        state.cards[index] = action.payload.value;\r\n      }\r\n    },\r\n    setCardType(state, action) {\r\n      state.shortScoreType = action.payload;\r\n    },\r\n    resetSettings() {\r\n      return initialState;\r\n    }\r\n  }\r\n})\r\n\r\nexport default settingsSlice.reducer;\r\nexport const {setSettings, resetSettings, setTimer, addCard, updateCard, setCardType} = settingsSlice.actions;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { VotingModel } from \"../serverService/models/votingModel\";\r\n\r\nconst initialState: Array<VotingModel> = []\r\n\r\nconst votingSlice = createSlice({\r\n  name: \"votingSlice\",\r\n  initialState,\r\n  reducers: {\r\n    updateVoits(state, action) {\r\n      return action.payload;\r\n    },\r\n    resetVoits() {\r\n      return initialState;\r\n    }\r\n  }\r\n})\r\n\r\nexport default votingSlice.reducer;\r\nexport const {updateVoits, resetVoits} = votingSlice.actions;","export function hashCode(s: string) {\r\n  return s.split('').reduce((a, b) => {\r\n    a = (a << 5) - a + b.charCodeAt(0);\r\n    return a & a;\r\n  }, 0);\r\n}","import { UserInfo } from \"./models/userInfoModel\";\r\nimport LobbyService from \"./lobbyService\";\r\nimport { ConnectUserToWS } from \"./models/connectUserToWSModel\";\r\nimport { HttpResponseModel } from \"./models/httpResponseModel\";\r\nimport { RegistrationModel } from \"./models/registrationModel\";\r\nimport { SignInModel } from \"./models/signInModel\";\r\nimport { DisconectModel } from \"./models/disconnectModel\";\r\nimport { IssueModel } from \"./models/issueModel\";\r\nimport { hashCode } from \"../tool/hashFunction\";\r\nimport { VotingModel } from \"./models/votingModel\";\r\nimport { ChatMessageInfo } from \"./models/chatMessageInfoModel\";\r\nimport { ChoiceModel } from \"./models/choiceModel\";\r\nimport Lobby from \"../components/pages/Lobby/LobbyStart/Lobby\";\r\nimport { SettingsModel } from \"../store/settingsSlice\";\r\n\r\nconst url = \"https://planing-poker-fury.herokuapp.com/\";\r\nconst wsUrl = \"wss://planing-poker-fury.herokuapp.com/\";\r\nlet wss:WebSocket;\r\nlet isConnect = false;\r\nlet serverDispatch:any;\r\nlet serverRouter:any;\r\n\r\nfunction setDispatch(dispatch:any) {\r\n  serverDispatch = dispatch;\r\n  LobbyService.setLobbyDispatch(dispatch);\r\n}\r\n\r\nfunction setRouter(router:any) {\r\n  serverRouter = router;\r\n  LobbyService.setLobbyRouter(router);\r\n}\r\n\r\n\r\n//http part\r\nasync function registerNewUser(regInfo:RegistrationModel) {\r\n  const request = JSON.stringify(regInfo);\r\n\r\n  const response = await fetch(url + \"regNewUser\", {\r\n    body: request,\r\n    headers: { 'Content-Type': 'application/json' },\r\n    method: \"POST\"\r\n  }).then(res => res.json());\r\n\r\n  return response as HttpResponseModel;\r\n}\r\n\r\nasync function signInUser(signInInfo:SignInModel) {\r\n  const request = JSON.stringify(signInInfo);\r\n  console.log(111, url + \"singIn\")\r\n  const response = await fetch(url + \"singIn\", {\r\n    body: request,\r\n    headers: { 'Content-Type': 'application/json' },\r\n    method: \"POST\"\r\n  }).then(res => res.json());\r\n\r\n  return response as HttpResponseModel;\r\n}\r\n\r\n//WS part\r\nfunction connectToRoom(userInfo: UserInfo, roomId:string) {\r\n  const connectionInfo:ConnectUserToWS = {\r\n    userInfo: userInfo,\r\n    roomId: roomId\r\n  }\r\n  wss = new WebSocket(wsUrl);\r\n\r\n  wss.onopen = () => {\r\n    isConnect = true;\r\n    LobbyService.connectToRoom(wss, connectionInfo);\r\n  }\r\n}\r\n\r\nfunction makeNewRoom(scrumInfo:UserInfo) {\r\n  wss = new WebSocket(wsUrl);\r\n\r\n  wss.onopen = () => {\r\n    isConnect = true;\r\n    LobbyService.makeNewRoom(wss, scrumInfo);\r\n  }\r\n}\r\n\r\nfunction disconect(userInfo:UserInfo, roomId:string, reason?:string) {\r\n  const disconnectInfo:DisconectModel = {\r\n    login: userInfo.login,\r\n    reason: reason || '',\r\n    roomId: roomId\r\n  }\r\n  LobbyService.disconectFromRoom(disconnectInfo);\r\n}\r\n\r\nfunction makeIssue(issue:IssueModel) {\r\n  issue.id = String(hashCode(issue.title));\r\n  LobbyService.sendIssueToRoom(issue);\r\n}\r\n\r\nfunction updateIssue(issue:IssueModel) {\r\n  LobbyService.updateIssueInRoom(issue);\r\n}\r\n\r\nfunction deleteIssue(issueId:string) {\r\n  LobbyService.deleteIssue(issueId);\r\n}\r\n\r\nfunction kickPlayer(kickInfo:VotingModel) {\r\n  LobbyService.sendKickOfferToRoom(kickInfo);\r\n}\r\n\r\nfunction setKickConclusion(conclusion:boolean, userLogin:string, kickedPlayerLogin?:string,) {\r\n  LobbyService.sendKickConclusionToRoom(conclusion, userLogin, kickedPlayerLogin);\r\n}\r\n\r\nfunction startGame() {\r\n  LobbyService.makeGameInRoom();\r\n}\r\n\r\nfunction sendChatMessage(messageInfo:ChatMessageInfo) {\r\n  LobbyService.sendChatMessage(messageInfo);\r\n}\r\n\r\nfunction movePlayerFromQueueToGame(userLogin:string) {\r\n  LobbyService.movePlayerInRoom(userLogin);\r\n}\r\n\r\nfunction startVoteIssue(issueId:string) {\r\n  LobbyService.startVoteIssueInRoom(issueId);\r\n}\r\n\r\nfunction selectIssue(issueId:string) {\r\n  LobbyService.selectIssueInRoom(issueId);\r\n}\r\n\r\nfunction stopVoteIssue(issueId:string) {\r\n  LobbyService.stopVoteIssueInRoom(issueId);\r\n}\r\n\r\nfunction resetVoteIssue(issueId:string) {\r\n  LobbyService.resetVoteIssueInRoom(issueId);\r\n}\r\n\r\nfunction makeChoice(choiceInfo:ChoiceModel) {\r\n  LobbyService.sendChoiceToGame(choiceInfo);\r\n}\r\n\r\nfunction stopGame() {\r\n  LobbyService.stopGameInRoom();\r\n}\r\n\r\nfunction setSettings(settings:SettingsModel) {\r\n  LobbyService.setSettingsInRoom(settings);\r\n}\r\n\r\nconst ServerService = {\r\n  setDispatch,\r\n  setRouter,\r\n\r\n  registerNewUser,\r\n  signInUser,\r\n  connectToRoom,\r\n  makeNewRoom,\r\n  disconect,\r\n  \r\n  makeIssue,\r\n  updateIssue,\r\n  deleteIssue,\r\n\r\n  kickPlayer,\r\n  setKickConclusion,\r\n\r\n  startGame,\r\n  stopGame,\r\n\r\n  sendChatMessage,\r\n\r\n  movePlayerFromQueueToGame,\r\n\r\n  makeChoice,\r\n  startVoteIssue,\r\n  stopVoteIssue,\r\n  selectIssue,\r\n  resetVoteIssue,\r\n\r\n  setSettings\r\n}\r\nexport default ServerService;","import { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider } from '@material-ui/core';\r\nimport { FC } from 'react';\r\nimport IRegisterSuccessPopupProps from '../../../types/RegisterSuccessPopupProps.type';\r\nimport './RegisterSuccessPopup.scss';\r\nimport { useHistory } from 'react-router';\r\nimport { BASE_URL } from '../../../constants';\r\n\r\nexport const RegisterSuccessPopup: FC<IRegisterSuccessPopupProps> = (props: IRegisterSuccessPopupProps) => {\r\n  const { open, onChangeRegisterSuccessPopupState } = props;\r\n  const router = useHistory();\r\n\r\n  const closePopup = () => {\r\n    onChangeRegisterSuccessPopupState(false);\r\n    router.push(`${BASE_URL}/welcomePage`);\r\n  };\r\n\r\n  return (\r\n    <Dialog className=\"RegisterSuccessPopup\" open={ open } onClose={ closePopup }>\r\n      <DialogTitle>Success registration</DialogTitle>\r\n      \r\n      <DialogContent>\r\n        <DialogContentText>Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.</DialogContentText>\r\n\r\n        <DialogContentText >Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.</DialogContentText>\r\n\r\n        <DialogContentText>Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.</DialogContentText>\r\n      </DialogContent>\r\n\r\n      <Divider />\r\n\r\n      <DialogActions>\r\n        <Button autoFocus onClick={ closePopup }>OK</Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};","import './PopUpLinearProgress.scss';\r\nimport { LinearProgress, Dialog } from '@material-ui/core';\r\nimport { FC } from 'react';\r\nimport IPopUpLinearProgressProps from '../../../types/PopUpLinearProgressProps.type';\r\n\r\nexport const PopUpLinearProgress: FC<IPopUpLinearProgressProps> = ({ loading, children, ...props }: IPopUpLinearProgressProps) => {\r\n  return (\r\n    <Dialog {...props} className={ `${ props.className } PopUpLinearProgress`}>\r\n      { loading && <LinearProgress /> }\r\n      { children }\r\n    </Dialog>\r\n  );\r\n};","import './FailPopUp.scss';\r\nimport { FC } from 'react';\r\nimport { Dialog } from '@material-ui/core';\r\nimport { Alert, AlertTitle } from '@mui/material';\r\nimport IFailPopUpProps from '../../../types/FailPopUpProps';\r\n\r\nexport const FailPopUp: FC<IFailPopUpProps> = (props: IFailPopUpProps) => {\r\n  const { open, onChangeFailPopUpState, title, description } = props;\r\n\r\n  return (\r\n    <Dialog className=\"FailPopUp\" open={ open } onClose={ () => onChangeFailPopUpState(false) }>\r\n      <Alert onClose={ () => onChangeFailPopUpState(false) } variant=\"outlined\" severity=\"error\">\r\n        <AlertTitle>{ title }</AlertTitle>\r\n        { description }\r\n      </Alert>\r\n    </Dialog>\r\n  );\r\n};","import './RegisterPopup.scss';\r\nimport { ChangeEvent, FC, useState } from 'react';\r\nimport { Avatar, Button, DialogActions, Input, TextField } from '@material-ui/core';\r\nimport IRegisterPopupProps from '../../../types/RegisterPopupProps.type';\r\nimport { REGISTER_POPUP_FIELDS, REGISTER_POPUP_FIELDS_DEFAULT_VALUES } from '../../../constants';\r\nimport ServerService from '../../../serverService/serverService';\r\nimport { RegistrationModel } from '../../../serverService/models/registrationModel';\r\nimport IFieldsValues, { IFieldProps } from '../../../types/LogInOrSignUpPopup.type';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setUserInfo } from '../../../store/currentUserSlice';\r\nimport { RegisterSuccessPopup } from '../RegisterSuccessPopup/RegisterSuccessPopup';\r\nimport { PopUpLinearProgress } from '../../Base/PopUpLinearProgress/PopUpLinearProgress';\r\nimport { FailPopUp } from '../../Base/FailPopUp/FailPopUp';\r\n\r\nexport const RegisterPopup: FC<IRegisterPopupProps> = ({ open, onChangeRegisterPopupState }: IRegisterPopupProps) => {\r\n  const dispatch = useDispatch();\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [avatar, setAvatar] = useState<string>('');\r\n\r\n  const [fieldsValues, setFieldsValues] = useState<IFieldsValues>(REGISTER_POPUP_FIELDS_DEFAULT_VALUES);\r\n  const [errors, setErrors] = useState<string[]>([]);\r\n\r\n  const [openRegisterSuccessPopup, setOpenRegisterSuccessPopup] = useState<boolean>(false);\r\n  const [openFailPopup, setOpenFailPopup] = useState<boolean>(false);\r\n\r\n  const changeStringAvatar = (name: string | undefined): string | null => {\r\n    if (!name) return null;\r\n\r\n    return (name.length) > 1 ? `${name[0]}${name[name.length - 1]}` : `${name[0]}`;\r\n  };\r\n\r\n  const changeAvatar = (target: HTMLInputElement | HTMLTextAreaElement): void => {\r\n    const file = (target as { files: FileList }).files[0];\r\n\r\n    if (file) {\r\n      target.value = '';\r\n      const reader = new FileReader();\r\n\r\n      reader.onload = () => {\r\n        if (reader.result) {\r\n          setAvatar(reader.result.toString());\r\n          setFieldsValues({...fieldsValues, avatar:reader.result.toString()});\r\n        }\r\n      }\r\n      \r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  const HandleConfirmRegistration = async () => {\r\n    setLoading(true);\r\n\r\n    const response = await ServerService.registerNewUser(fieldsValues as RegistrationModel);\r\n\r\n    if(response.isSuccess) {\r\n      dispatch(setUserInfo({...fieldsValues, isLogin:true}));\r\n      setLoading(false);\r\n      onChangeRegisterPopupState(false);\r\n      setFieldsValues(REGISTER_POPUP_FIELDS_DEFAULT_VALUES);\r\n      setOpenRegisterSuccessPopup(true);\r\n    } else {\r\n      setLoading(false);\r\n      setOpenFailPopup(true);\r\n    }\r\n  }\r\n\r\n  const addFieldErrorMessage = (fieldProps: IFieldProps): string => {\r\n    const { name, title, errorMessage } = fieldProps;\r\n  \r\n    if (!errors.includes(name)) return '';\r\n  \r\n    return errorMessage ? errorMessage : `${ title } can't be shorter than 3 chars.`;\r\n  }\r\n\r\n  const checkValidation = (name: string, value: string): void => {\r\n    if (!errors || !setErrors) return;\r\n  \r\n    let regex = /.{3,}/;\r\n  \r\n    if (name === 'login') {\r\n      regex = /^[^\\s]{3,}$/;\r\n    }\r\n  \r\n    if (!regex.test(value)) {\r\n      if (!errors.includes(name)) {\r\n        setErrors([...errors, name]);\r\n      }\r\n    } else if (errors.includes(name)) {\r\n      const newErrors = errors.filter((error) => error !== name);\r\n      setErrors(newErrors);\r\n    }\r\n  };\r\n\r\n  const updateFieldValue = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    const { value, name } = e.target;\r\n    setFieldsValues({ ...fieldsValues, [name]: value });\r\n    checkValidation(name, value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PopUpLinearProgress className=\"RegisterPopup\" open={ open } onClose={ () => onChangeRegisterPopupState(false) } loading={ loading }>\r\n        <form>\r\n          <h3 className=\"RegisterPopup__title\">Register new user</h3>\r\n\r\n          {\r\n            REGISTER_POPUP_FIELDS.map((field) => (\r\n              <div className=\"RegisterPopup__box\" key={field.name}>\r\n                <label>\r\n                  <span className=\"RegisterPopup__boxTitle\">Your { field.title }:</span>\r\n                  <TextField\r\n                    className=\"RegisterPopup__field\"\r\n                    defaultValue={ fieldsValues[field.name as keyof IFieldsValues] }\r\n                    onChange={ updateFieldValue }\r\n                    name={ field.name }\r\n                    error={ errors.includes(field.name) }\r\n                    helperText={ addFieldErrorMessage(field) }\r\n                    type={ field.type ? field.type : 'text' }\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                  />\r\n                </label>\r\n              </div>\r\n            ))\r\n          }\r\n\r\n          <div className=\"RegisterPopup__avatar\">\r\n            <span className=\"RegisterPopup__boxTitle\">Image:</span>\r\n\r\n            <div className=\"RegisterPopup__avatarBtns\">\r\n              <label className=\"RegisterPopup__avatarUpload\">\r\n                <Input type=\"file\" onChange={ (e) => changeAvatar(e.target) } />\r\n                <Avatar src={ avatar } children={ changeStringAvatar(fieldsValues.firstName) } alt=\"Avatar\" />\r\n              </label>\r\n              <button className=\"RegisterPopup__avatarReset\" onClick={ () => setAvatar('') } type=\"button\">&times;</button>\r\n            </div>\r\n          </div>\r\n\r\n          <DialogActions className=\"RegisterPopup__btns\">\r\n            <Button onClick={ () => HandleConfirmRegistration() } disabled={ errors.length > 0 } variant=\"contained\" color=\"primary\" size=\"large\">Confirm</Button>\r\n            <Button onClick={ () => onChangeRegisterPopupState(false) } variant=\"outlined\" color=\"primary\" size=\"large\">Cancel</Button>\r\n          </DialogActions>\r\n        </form>\r\n      </PopUpLinearProgress>\r\n\r\n      <RegisterSuccessPopup open={ openRegisterSuccessPopup } onChangeRegisterSuccessPopupState={ (open) => setOpenRegisterSuccessPopup(open) } />\r\n      <FailPopUp open={ openFailPopup } onChangeFailPopUpState={ (open) => setOpenFailPopup(open) } title=\"Fail registration\" description=\"This is an error alert — check it out!\" />\r\n    </>\r\n  );\r\n};\r\n","import './LogInPopup.scss';\r\nimport { ChangeEvent, FC, useState } from 'react';\r\nimport { Button, DialogActions, TextField } from '@material-ui/core';\r\nimport ILogInPopupProps from '../../../types/LogInPopupProps.type';\r\nimport IFieldsValues from '../../../types/LogInOrSignUpPopup.type';\r\nimport { BASE_URL, LOGIN_POPUP_FIELDS } from '../../../constants';\r\nimport ServerService from '../../../serverService/serverService';\r\nimport { useHistory } from 'react-router';\r\nimport { PopUpLinearProgress } from '../../Base/PopUpLinearProgress/PopUpLinearProgress';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setUserInfo } from '../../../store/currentUserSlice';\r\nimport { FailPopUp } from '../../Base/FailPopUp/FailPopUp';\r\n\r\nexport const LoginPopup: FC<ILogInPopupProps> = ({ open, onChangeLogInPopupState }: ILogInPopupProps) => {\r\n  const router = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [fieldsValues, setFieldsValues] = useState<IFieldsValues>({ login: '', password: '' });\r\n\r\n  const [openFailPopup, setOpenFailPopup] = useState<boolean>(false);\r\n\r\n  const HandleConfirmLogin = async () => {\r\n    setLoading(true);\r\n\r\n    const response = await ServerService.signInUser(fieldsValues);\r\n\r\n    if(response.isSuccess) {\r\n      setLoading(false);\r\n      dispatch(setUserInfo({...response.body, isLogin:true}))\r\n      setFieldsValues({ login: '', password: '' });\r\n      router.push(`${BASE_URL}/welcomePage`);\r\n      onChangeLogInPopupState(false);\r\n    } else {\r\n      setLoading(false);\r\n      setOpenFailPopup(true);\r\n    }\r\n  };\r\n\r\n  const handleFieldChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\r\n    const { value, name } = e.target;\r\n    setFieldsValues({ ...fieldsValues, [name]: value });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PopUpLinearProgress className=\"LogInPopup\" open={ open } onClose={ () => onChangeLogInPopupState(false) } loading={ loading }>\r\n        <form>\r\n          {\r\n            LOGIN_POPUP_FIELDS.map((fieldName) => (\r\n              <div className=\"LogInPopup__fieldContainer\" key={ fieldName }>\r\n                <label>\r\n                  <TextField\r\n                    className=\"LogInPopup__field\"\r\n                    defaultValue={ fieldsValues[fieldName as keyof IFieldsValues] }\r\n                    onChange={ handleFieldChange }\r\n                    name={ fieldName }\r\n                    type={ fieldName === 'password' ? 'password' : 'text' }\r\n                    label={ fieldName }\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                  />\r\n                </label>\r\n              </div>\r\n            ))\r\n          }\r\n\r\n          <DialogActions className=\"LogInPopup__actions\">\r\n            <Button onClick={HandleConfirmLogin} variant=\"contained\" color=\"primary\" size=\"large\">Confirm</Button>\r\n            <Button onClick={() => onChangeLogInPopupState(false)} variant=\"outlined\" color=\"primary\" size=\"large\">Cancel</Button>\r\n          </DialogActions>\r\n        </form>\r\n      </PopUpLinearProgress>\r\n\r\n      <FailPopUp open={ openFailPopup } onChangeFailPopUpState={ (open) => setOpenFailPopup(open) } title=\"Fail Log In\" description=\"This is an error alert — check it out!\" />\r\n    </>\r\n  );\r\n};","import './StartPage.scss';\r\nimport { FC, useState } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport { LargeLogo } from '../../LargeLogo/LargeLogo';\r\nimport { RegisterPopup } from '../../popUps/RegisterPopup/RegisterPopup';\r\nimport { LoginPopup } from '../../popUps/LogInPopup/LogInPopup';\r\n\r\nexport const StartPage: FC = () => {\r\n  const [registerPopupOpen, setRegisterPopupOpen] = useState(false);\r\n  const [LogInPopupOpen, setLogInPopupOpen] = useState(false);\r\n\r\n  return (\r\n    <div className=\"startPage page__content\">\r\n      <LargeLogo />\r\n\r\n      <Button onClick={ () => setRegisterPopupOpen(true) } variant=\"contained\" color=\"primary\" size=\"large\">Sign up</Button>\r\n      <Button onClick={ () => setLogInPopupOpen(true) } variant=\"contained\" color=\"primary\" size=\"large\">Log in</Button>\r\n\r\n      <RegisterPopup open={registerPopupOpen} onChangeRegisterPopupState={(open) => setRegisterPopupOpen(open)} />\r\n      <LoginPopup open={LogInPopupOpen} onChangeLogInPopupState={(open) => setLogInPopupOpen(open)} />\r\n    </div>\r\n  );\r\n};","import './WelcomePage.scss';\r\nimport { FC, useState } from 'react';\r\nimport { Button, Grid, TextField } from '@material-ui/core';\r\nimport { LargeLogo } from '../../LargeLogo/LargeLogo';\r\nimport ServerService from '../../../serverService/serverService';\r\nimport { useTypedSelector } from '../../../hooky/useTypedSelector';\r\nimport { useHistory } from 'react-router';\r\nimport { setScrumStatus } from '../../../store/currentUserSlice';\r\nimport { UserInfo } from '../../../serverService/models/userInfoModel';\r\nimport { useDispatch } from 'react-redux';\r\nimport { BASE_URL } from '../../../constants';\r\n\r\n\r\nexport const WelcomePage: FC = () => {\r\n  const currentUserInfo = useTypedSelector(store => store.userInfo);\r\n  const currentRoom = useTypedSelector(store => store.roomInfo);\r\n  const [url, setUrl] = useState('');\r\n  const router = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  ServerService.setDispatch(dispatch);\r\n\r\n  const onStartBtnClick = () => {\r\n    dispatch(setScrumStatus(true));\r\n    const userInfoCopy = makeUserInfoCopy(currentUserInfo, true);\r\n    ServerService.makeNewRoom(userInfoCopy);\r\n    router.push(`${BASE_URL}/lobbyStart`);\r\n  }\r\n\r\n  const onConnectToLobbyBtnClick = () => {\r\n    dispatch(setScrumStatus(false));\r\n    const userInfoCopy = makeUserInfoCopy(currentUserInfo, false);\r\n    //TODO при введении url разу добавлять в стейт\r\n    const roomId = defineIdfromUrl(url);\r\n    ServerService.connectToRoom(userInfoCopy, roomId);\r\n    //TODO коннект уже в саму игру (нужно в Room хранить поле isInGame)\r\n    router.push(`${BASE_URL}/lobbyStart`);\r\n  }\r\n\r\n  return (\r\n    <div className=\"welcome-page page__content\">\r\n      <LargeLogo />\r\n\r\n      <span className=\"welcome-page__subtitle\">Start your planning:</span>\r\n\r\n      <Grid\r\n        className=\"welcome-page__control-block\"\r\n        container\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        <span className=\"welcome-page__control-block-text\">Create session:</span>\r\n        <Button\r\n          className=\"welcome-page__control-block-btn\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          size=\"large\"\r\n          onClick={onStartBtnClick}\r\n        >\r\n          Start new game\r\n        </Button>\r\n      </Grid>\r\n\r\n      <span className=\"welcome-page__subtitle welcome-page__subtitle_margin_left\">OR:</span>\r\n\r\n      <div className=\"welcome-page__control-block\">\r\n        <span className=\"welcome-page__control-block-text welcome-page__control-block-text_block\">\r\n          Connect to lobby by { }\r\n          <strong className=\"welcome-page__control-block-subtext\">URL</strong>\r\n          :\r\n        </span>\r\n\r\n        <Grid\r\n          container\r\n          justifyContent=\"space-between\"\r\n          alignItems=\"center\"\r\n        >\r\n          <TextField\r\n            className=\"welcome-page__control-block-field\"\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            value={url}\r\n            onChange={(e)=>setUrl(e.target.value)}\r\n          />\r\n          <Button\r\n            className=\"welcome-page__control-block-btn\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"large\"\r\n            onClick={onConnectToLobbyBtnClick}\r\n          >\r\n            Connect\r\n          </Button>\r\n        </Grid>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction makeUserInfoCopy (currentUserInfo:UserInfo, isScrum:boolean) {\r\n  const userInfoCopy:UserInfo = {\r\n    ...currentUserInfo,\r\n    isScrum: isScrum\r\n  }\r\n  return userInfoCopy;\r\n}\r\n\r\nfunction defineIdfromUrl(urlStr:string) {\r\n  const urlArr = urlStr.split('/');\r\n  return urlArr[urlArr.length-1];\r\n}","import { Room } from \"../serverService/models/roomModel\";\r\n\r\nfunction getUserByLogin(room:Room,userlogin: string) {\r\n  const user = room.players.find((player) => player.login == userlogin);\r\n  return user;\r\n}\r\n\r\nconst clientService = {\r\n    getUserByLogin\r\n}\r\n\r\nexport default clientService;","import { Avatar, IconButton } from \"@material-ui/core\";\r\nimport BlockIcon from \"@material-ui/icons/Block\";\r\nimport clientService from \"../../../../clientService/clientService\";\r\nimport { useTypedSelector } from \"../../../../hooky/useTypedSelector\";\r\nimport { VotingModel } from \"../../../../serverService/models/votingModel\";\r\nimport ServerService from \"../../../../serverService/serverService\";\r\nimport \"./PlayerCard.scss\";\r\n\r\ninterface PlayerCardProps {\r\n  avatar: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  jobPosition: string;\r\n  login: string;\r\n  isScrum:boolean;\r\n}\r\n\r\nconst PlayerCard = (props: PlayerCardProps) => {\r\n  const currentUserLogin = useTypedSelector((store) => store.userInfo.login);\r\n  const room = useTypedSelector((store) => store.roomInfo);\r\n  const cardOwner = clientService.getUserByLogin(room, props.login);\r\n  const isScrum = cardOwner?.isScrum;\r\n  const { avatar, firstName, lastName, jobPosition } = props;\r\n  let letterAvatar;\r\n  if (avatar === undefined || avatar === \"\") {\r\n    letterAvatar = firstName[0];\r\n    if (lastName !== undefined && lastName !== \"\") {\r\n      letterAvatar += lastName[0];\r\n    }\r\n  }\r\n  \r\n  const onKickBtnClick = () => {\r\n    const kickVoting: VotingModel = {\r\n      whoKick: props.login,\r\n      amountAgree: 0,\r\n      isVoiting: false,\r\n      message: \"kick\",\r\n      whoOffer: currentUserLogin,\r\n    };\r\n    ServerService.kickPlayer(kickVoting);\r\n  };\r\n\r\n  const createBtn = () => {\r\n    if (isScrum || props.isScrum) {\r\n      return <div style={{ width: \"10px\", height: \"40px\" }}></div>;\r\n    } else {\r\n      return (\r\n        <IconButton>\r\n          <BlockIcon onClick={onKickBtnClick} />\r\n        </IconButton>\r\n      );\r\n    }\r\n  }\r\n\r\n  \r\n  const btn = createBtn();\r\n\r\n  return (\r\n    <div className=\"PlayerCard\">\r\n      <Avatar className=\"PlayerCard_avatar\" src={avatar}>\r\n        {letterAvatar}\r\n      </Avatar>\r\n      <div className=\"PlayerCard_info\">\r\n        <div className=\"PlayerCard_info__name\">\r\n          {firstName} {lastName}\r\n        </div>\r\n        <div className=\"PlayerCard_info__position\">{jobPosition}</div>\r\n      </div>\r\n      {btn}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlayerCard;\r\n","import './Issue.scss';\r\nimport { FC } from 'react';\r\nimport IIssueProps from '../../../types/IssueProps.type';\r\n\r\nexport const Issue: FC<IIssueProps> = ({ classes, children }: IIssueProps) => {\r\n  return (\r\n    <div className={ `${ classes } Issue` }>{ children }</div>\r\n  );\r\n};\r\n","import \"./GameIssue.scss\";\r\nimport { FC } from \"react\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { useTypedSelector } from \"../../../../hooky/useTypedSelector\";\r\nimport IGameIssueProps from \"../../../../types/GameIssueProps.type\";\r\nimport ServerService from \"../../../../serverService/serverService\";\r\nimport { Issue } from \"../../../Base/Issue/Issue\";\r\n\r\nexport const GameIssue: FC<IGameIssueProps> = (props: IGameIssueProps) => {\r\n  const { isScrum } = useTypedSelector(store => store.userInfo);\r\n  const { title, priority, score, isActive, isVoting, link } = props;\r\n\r\n  const onDeleteBtnClick = () => {\r\n    ServerService.deleteIssue(props.id);\r\n  }\r\n\r\n  const getClassName = (): string => {\r\n    return `GameIssue${ isVoting ? ' GameIssue_voting' : (isActive ? ' GameIssue_active' : '') }`;\r\n  }\r\n\r\n  return (\r\n    <Issue classes={ getClassName() }>\r\n      <div className=\"Issue__info\">\r\n        { isVoting &&\r\n          <span>Current</span>\r\n        }\r\n        <a className=\"Issue__title\" href={ link } target=\"_blank\">{ title }</a>\r\n        <span className=\"Issue__priority\">{ priority }</span>\r\n      </div>\r\n\r\n      { score ?\r\n        <span className=\"GameIssue__score\">{ score ? \"✅\" : \"🛑\" }</span> : null\r\n      }\r\n\r\n      { isScrum &&\r\n        <IconButton>\r\n          <CloseIcon onClick={ onDeleteBtnClick } />\r\n        </IconButton>\r\n      }\r\n    </Issue>\r\n  );\r\n};\r\n","export const handleDragAndDrop = (event: any) => {\r\n  const chat = event.target;\r\n  if (!chat.classList.contains(\"draggable\")) return;\r\n\r\n  let shiftX = event.clientX - chat.getBoundingClientRect().left;\r\n  let shiftY = event.clientY - chat.getBoundingClientRect().top;\r\n\r\n  moveAt(event.pageX, event.pageY);\r\n  function moveAt(pageX: number, pageY: number) {\r\n    chat.style.left = pageX - shiftX + \"px\";\r\n    chat.style.top = pageY - shiftY + \"px\";\r\n  }\r\n\r\n  function onMouseMove(event: any) {\r\n    moveAt(event.pageX, event.pageY);\r\n  }\r\n  document.addEventListener(\"mousemove\", onMouseMove);\r\n  chat.onmouseup = function () {\r\n    document.removeEventListener(\"mousemove\", onMouseMove);\r\n    chat.onmouseup = null;\r\n  };\r\n\r\n  chat.ondragstart = function () {\r\n    return false;\r\n  };\r\n};\r\n","import Avatar from \"@material-ui/core/Avatar\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport clientService from \"../../../clientService/clientService\";\r\nimport { useTypedSelector } from \"../../../hooky/useTypedSelector\";\r\nimport { ChatMessageInfo } from \"../../../serverService/models/chatMessageInfoModel\";\r\nimport { UserInfo } from \"../../../serverService/models/userInfoModel\";\r\n\r\ninterface ChatMessageInfoExt {\r\n  messageInfo: ChatMessageInfo;\r\n}\r\n\r\nconst ChatMessage = (props: ChatMessageInfoExt) => {\r\n  const room = useTypedSelector((store) => store.roomInfo);\r\n  const user = clientService.getUserByLogin(\r\n    room,\r\n    (props.messageInfo as ChatMessageInfo).login\r\n  );\r\n\r\n  const { firstName, lastName, avatar:src, jobPosition} = user as UserInfo;\r\n\r\n  let avatar;\r\n  //!это дело сделать понятным\r\n  if ((src === undefined || src === \"\") && firstName !== undefined) {\r\n    avatar = firstName[0];\r\n    if (lastName !== undefined && lastName !== \"\") {\r\n      avatar += lastName[0];\r\n    }\r\n  }\r\n\r\n  console.log(props);\r\n\r\n  return (\r\n    <li className=\"Chat_message\">\r\n      <div className=\"Chat_message__text\">{props.messageInfo.message}</div>\r\n      <Tooltip\r\n        title={\r\n          <div style={{ textAlign: \"center\" }}>\r\n            {firstName} {lastName}\r\n            <br/>\r\n            {jobPosition}\r\n          </div>\r\n        }\r\n      >\r\n        <Avatar className=\"Chat_message__avatar\" src={src}>\r\n          {avatar}\r\n        </Avatar>\r\n      </Tooltip>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ChatMessage;\r\n","export interface TechnicalMessageProps {\r\n  message:string,\r\n  isTechnicalMessage: boolean\r\n}\r\n\r\nexport function TechnicalMessage(props:TechnicalMessageProps) {\r\n  return(\r\n    <li className=\"technical__message\">\r\n      {props.message}\r\n    </li>\r\n  )\r\n}","import { useTypedSelector } from \"../../hooky/useTypedSelector\";\r\nimport { ChatMessageInfo } from \"../../serverService/models/chatMessageInfoModel\";\r\nimport { handleDragAndDrop } from \"../../tool/dragAndDrop\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ChatIcon from \"@material-ui/icons/Chat\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport ChatMessage from \"./ChatMessage/ChatMessage\";\r\nimport clientService from \"../../clientService/clientService\";\r\nimport ServerService from \"../../serverService/serverService\";\r\nimport \"./Chat.scss\";\r\nimport {\r\n  TechnicalMessage,\r\n  TechnicalMessageProps,\r\n} from \"./TechnicalMessage/TechnicalMessage\";\r\n\r\nconst Chat = () => {\r\n  const chat = useTypedSelector((store) => store.chat);\r\n  const currentUser = useTypedSelector((store) => store.userInfo);\r\n\r\n  const sendMessage = (event: any) => {\r\n    //!Вот эту страашилку желательно переписать\r\n    const targetInput = (event.target as HTMLElement)\r\n      .closest(\".Chat\")\r\n      ?.querySelector(\".Chat_input__text\") as HTMLInputElement;\r\n\r\n    const message = targetInput.value;\r\n    if (message) {\r\n      const messageInfo = makeNewMessage(currentUser.login, message);\r\n      ServerService.sendChatMessage(messageInfo);\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    targetInput.value = \"\";\r\n  };\r\n\r\n  const handleChat = (event: any) => {\r\n    document.querySelector(\".Chat\")?.classList.toggle(\"Chat__hidden\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton className=\"Chat__hide-btn\" onClick={handleChat}>\r\n        <ChatIcon />\r\n      </IconButton>\r\n      <div className=\"Chat draggable\" onMouseDown={handleDragAndDrop}>\r\n        <ul className=\"Chat_messages\">\r\n          {chat.map((messageInfo) => {\r\n            if ((messageInfo as ChatMessageInfo).login) {\r\n              return (\r\n                <ChatMessage messageInfo={messageInfo as ChatMessageInfo} />\r\n              );\r\n            } else {\r\n              return (\r\n                <TechnicalMessage\r\n                  isTechnicalMessage={true}\r\n                  message={String(messageInfo)}\r\n                />\r\n              );\r\n            }\r\n          })}\r\n        </ul>\r\n\r\n        <div className=\"Chat_input\">\r\n          <input placeholder=\"Type something...\" className=\"Chat_input__text\" />\r\n          <IconButton onClick={sendMessage} className=\"Chat_input__button\">\r\n            <SendIcon />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n\r\nfunction makeNewMessage(login: string, message: string) {\r\n  const messageInfo: ChatMessageInfo = {\r\n    login,\r\n    message,\r\n  };\r\n  return messageInfo;\r\n}\r\n","import { useTypedSelector } from \"../../../../hooky/useTypedSelector\";\r\nimport { UserInfo } from \"../../../../serverService/models/userInfoModel\";\r\nimport ServerService from \"../../../../serverService/serverService\";\r\nimport PlayerCard from \"../PlayerCard/PlayerCard\";\r\n\r\nexport function QueuePerson(userInfo:UserInfo) {\r\n  const isScrum = useTypedSelector((store) => store.userInfo.isScrum);\r\n  const onAddBtnClick = () => {\r\n    ServerService.movePlayerFromQueueToGame(userInfo.login);\r\n  }\r\n\r\n  return(\r\n    <li className=\"queue__person\">\r\n      {isScrum ?\r\n      <button className=\"queue__addBtn\" onClick={onAddBtnClick}>+</button> :\r\n      <></>\r\n      }\r\n      <PlayerCard {...userInfo}></PlayerCard>\r\n    </li>\r\n  );\r\n}","import { useTypedSelector } from \"../../../../hooky/useTypedSelector\";\r\nimport { QueuePerson } from \"./queuePerson\";\r\nimport \"./queue.scss\";\r\nimport { handleDragAndDrop } from \"../../../../tool/dragAndDrop\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport { QueueOutlined } from \"@material-ui/icons\";\r\n\r\nexport function Queue() {\r\n  const room = useTypedSelector((store) => store.roomInfo);\r\n  const handleChat = (event: any) => {\r\n    document.querySelector(\".queue\")?.classList.toggle(\"queue__hidden\");\r\n  };\r\n  return (\r\n    <>\r\n      <IconButton className=\"queue__hide-btn\" onClick={handleChat}>\r\n        <QueueOutlined />\r\n      </IconButton>\r\n      <ul className=\"queue draggable\" onMouseDown={handleDragAndDrop}>\r\n        <div className=\"queue__close\"></div>\r\n        {room.queue.map((playerInQ) => (\r\n          <QueuePerson {...playerInQ} />\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n","import { useTypedSelector } from \"../../hooky/useTypedSelector\";\r\nimport { ChoiceModel } from \"../../serverService/models/choiceModel\";\r\nimport ServerService from \"../../serverService/serverService\";\r\nimport \"./GameCard.scss\";\r\n\r\nexport interface CardProps {\r\n  value: string,\r\n}\r\n\r\nconst GameCard = (props: CardProps) => {\r\n  const { value } = props;\r\n  const { issuesInfo, isVoting } = useTypedSelector(store => store.game);\r\n  const { login } = useTypedSelector(store => store.userInfo);\r\n  const type = useTypedSelector((store => store.settings.shortScoreType));\r\n\r\n  const onChooseCard = () => {\r\n    if(isVoting) {\r\n      const currentIssueInfo = issuesInfo.find((issue) => issue.isSelected);\r\n      if(currentIssueInfo) {\r\n        const choiceInfo:ChoiceModel = {\r\n          issueId: currentIssueInfo.issue.id,\r\n          login: login,\r\n          score: props.value\r\n        }\r\n        ServerService.makeChoice(choiceInfo);\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div onClick={onChooseCard} className=\"card-container\">\r\n      <div className=\"GameCard\">\r\n        <div className=\"GameCard_front\">\r\n          <div className=\"GameCard_type\">{type}</div>\r\n          <div className=\"GameCard_value\">{value}</div>\r\n          <div className=\"GameCard_type GameCard_type__reverse\">{type}</div>\r\n        </div>\r\n        <div className=\"GameCard_back\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameCard;\r\n","import clientService from \"../../../../clientService/clientService\";\r\nimport { useTypedSelector } from \"../../../../hooky/useTypedSelector\";\r\nimport { UserInfo } from \"../../../../serverService/models/userInfoModel\";\r\nimport PlayerCard from \"../../Lobby/PlayerCard/PlayerCard\";\r\nimport {IssueInfo} from \"../../../../serverService/models/gameModel\";\r\nimport \"./GameSideBar.scss\";\r\n\r\nexport interface SideBarItemModel {\r\n  userInfo:UserInfo,\r\n  currentIssueInfo:IssueInfo\r\n}\r\n\r\nexport function GameSideBarItem(props:SideBarItemModel) {\r\n  const game = useTypedSelector((store) => store.game);\r\n  const scoreType = useTypedSelector(store=>store.settings.shortScoreType)\r\n  const isScrum = useTypedSelector((store) => store.userInfo.isScrum);\r\n  const userScore = props.currentIssueInfo.votes.find((vote) => vote.login === props.userInfo.login)?.score;\r\n\r\n  if(isScrum) {\r\n    return(\r\n      <li className=\"votes__item\">\r\n        <div className=\"votes__score\">{userScore || \"In progress\"}</div>\r\n        <PlayerCard {...props.userInfo}></PlayerCard>\r\n      </li>\r\n    );\r\n  } else {\r\n    return(\r\n      <li className=\"votes__item\">\r\n        {!game.isVoting ?\r\n          <div className=\"votes__score\">{`${userScore} ${scoreType}` || \"In progress\"}</div> :\r\n          <></>\r\n        }\r\n        <PlayerCard {...props.userInfo}></PlayerCard>\r\n      </li>\r\n    )\r\n  }\r\n\r\n}","import { useTypedSelector } from \"../../../../hooky/useTypedSelector\";\r\nimport { GameSideBarItem } from \"./GameSideBarItem\";\r\nimport './GameSideBar.scss'\r\n\r\nexport function GameSideBar() {\r\n  const game = useTypedSelector((store) => store.game);\r\n  const currentIssue = game.issuesInfo.find((issueInfo) => issueInfo.isSelected);\r\n\r\n  if(currentIssue) {\r\n    return(\r\n      <ul className=\"votes\">\r\n        {game.players.map((player) => <GameSideBarItem userInfo={player} \r\n                                      currentIssueInfo={currentIssue}></GameSideBarItem>)}\r\n      </ul>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ul className=\"votes\">\r\n\r\n    </ul>\r\n  )\r\n}","import './RoundTime.scss';\r\nimport { FC } from 'react';\r\nimport IRoundTimeProps from '../../../types/RoundTimeProps.type';\r\n\r\nexport const RoundTime: FC<IRoundTimeProps> = ({ classes, children }: IRoundTimeProps) => {\r\n  return (\r\n    <div className={ `${ classes } RoundTime`}>\r\n      <div className=\"RoundTime__header\">\r\n        <span>minutes</span>\r\n        <span>seconds</span>\r\n      </div>\r\n\r\n      <div className=\"RoundTime__container\">\r\n        { children }\r\n      </div>\r\n    </div>\r\n  );\r\n};","import './RoundTimePlayable.scss';\r\nimport { FC, useEffect, useState } from 'react';\r\nimport { RoundTime } from '../Base/RoundTime/RoundTime';\r\nimport { useTypedSelector } from '../../hooky/useTypedSelector';\r\n\r\nexport const RoundTimePlayable: FC = () => {\r\n  const { isVoting } = useTypedSelector((store) => store.game);\r\n  let { roundTime } = useTypedSelector((store) => store.settings);\r\n\r\n  let time = roundTime;\r\n  const [seconds, setSeconds] = useState<number>(roundTime);\r\n\r\n  useEffect(() => {\r\n    if (isVoting) {\r\n      time = roundTime;\r\n      setSeconds(roundTime);\r\n    }\r\n\r\n    const update = (): void => {\r\n      if (!isVoting) return;\r\n\r\n      --time;\r\n      setSeconds(time);\r\n\r\n      if (time > 0) {\r\n        setTimeout(() => update(), 1000);\r\n      }\r\n    };\r\n\r\n    setTimeout(() => update(), 1000);\r\n  }, [isVoting, setSeconds]);\r\n\r\n  const getMinutes = (): number => {\r\n    return Math.floor(seconds / 60);\r\n  };\r\n\r\n  const getSeconds = (): string | number => {\r\n    const exactSeconds = seconds % 60;\r\n    return (exactSeconds < 10) ? `0${ exactSeconds }` : exactSeconds;\r\n  };\r\n\r\n  return (\r\n    <RoundTime classes=\"RoundTimePlayable\">\r\n      <span className=\"RoundTime__time\">{ getMinutes() }</span>\r\n      :\r\n      <span className=\"RoundTime__time\">{ getSeconds() }</span>\r\n    </RoundTime>\r\n  );\r\n};","import './IssuePopup.scss';\r\nimport { FC, useState } from 'react';\r\nimport { Button, DialogActions, FormControl, MenuItem, Select, TextField } from '@material-ui/core';\r\nimport { PopUpLinearProgress } from '../PopUpLinearProgress/PopUpLinearProgress';\r\nimport { TIssuePriority } from '../../../types/IssuePriority.type';\r\nimport IIssuePopupProps from '../../../types/IssuePopupProps.type';\r\nimport ServerService from '../../../serverService/serverService';\r\nimport { hashCode } from '../../../tool/hashFunction';\r\n\r\nexport const IssuePopup: FC<IIssuePopupProps> = (props: IIssuePopupProps) => {\r\n  const { classes, open, onChangePopupState, issue } = props;\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  const [title, setTitle] = useState<string>(issue.title);\r\n  const [link, setLink] = useState<string>(issue.link);\r\n  const [priority, setPriority] = useState<TIssuePriority>(issue.priority as TIssuePriority);\r\n\r\n  const resetFields = (): void => {\r\n    setTitle('');\r\n    setLink('');\r\n    setPriority('low');\r\n  }\r\n\r\n  const handleIssue = (): void => {\r\n    setLoading(true);\r\n\r\n    if (classes === 'CreateIssuePopup') {\r\n      ServerService.makeIssue({ title, priority, link, id: String(hashCode(title) + Date.now()) });\r\n    } else {\r\n      ServerService.updateIssue({ ...issue, title, priority, link })\r\n    }\r\n    \r\n    setLoading(false);\r\n    onChangePopupState(false);\r\n\r\n    if (classes === 'CreateIssuePopup') {\r\n      resetFields();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <PopUpLinearProgress className={ `${ classes } IssuePopup` } open={ open } onClose={ () => onChangePopupState(false) } loading={ loading }>\r\n      <form>\r\n        <h3 className=\"IssuePopup__title\">\r\n          { classes === 'CreateIssuePopup' ? 'Create Issue' : 'Update Issue' }\r\n        </h3>\r\n\r\n        <label className=\"IssuePopup__box\">\r\n          <span className=\"IssuePopup__boxTitle\">Title:</span>\r\n          <TextField\r\n            className=\"IssuePopup__field\"\r\n            defaultValue={ title }\r\n            onChange={ (e) => setTitle(e.target.value) }\r\n            name=\"title\"\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n          />\r\n        </label>\r\n\r\n        <label className=\"IssuePopup__box\">\r\n          <span className=\"IssuePopup__boxTitle\">Link:</span>\r\n          <TextField\r\n            className=\"IssuePopup__field\"\r\n            defaultValue={ link }\r\n            onChange={ (e) => setLink(e.target.value) }\r\n            name=\"link\"\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n          />\r\n        </label>\r\n\r\n        <label className=\"IssuePopup__box\">\r\n          <span className=\"IssuePopup__boxTitle\">Priority:</span>\r\n\r\n          <FormControl>\r\n            <Select className=\"IssuePopup__select\" value={ priority } onChange={ (e) => setPriority(e.target.value as TIssuePriority) } name=\"priority\">\r\n              <MenuItem value=\"low\">Low</MenuItem>\r\n              <MenuItem value=\"middle\">Middle</MenuItem>\r\n              <MenuItem value=\"hight\">Hight</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </label>\r\n\r\n        <DialogActions className=\"IssuePopup__btns\">\r\n          <Button onClick={ handleIssue } variant=\"contained\" color=\"primary\" size=\"large\">Confirm</Button>\r\n          <Button onClick={ () => onChangePopupState(false) } variant=\"outlined\" color=\"primary\" size=\"large\">Cancel</Button>\r\n        </DialogActions>\r\n      </form>\r\n    </PopUpLinearProgress>\r\n  );\r\n};\r\n","import './CreateIssuePopup.scss';\r\nimport { FC } from 'react';\r\nimport { IssuePopup } from '../Base/IssuePopup/IssuePopup';\r\nimport ICreateIssuePopupProps from '../../types/CreateIssuePopupProps.type';\r\nimport { ISSUE_DEFAULT_VALUES } from '../../constants';\r\n\r\nexport const CreateIssuePopup: FC<ICreateIssuePopupProps> = (props: ICreateIssuePopupProps) => {\r\n  return (\r\n    <IssuePopup classes=\"CreateIssuePopup\" issue={ ISSUE_DEFAULT_VALUES } { ...props } />\r\n  );\r\n};\r\n","import './CreateIssue.scss';\r\nimport { FC, useState } from 'react';\r\nimport { Issue } from '../Base/Issue/Issue';\r\nimport { IconButton } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { CreateIssuePopup } from '../CreateIssuePopup/CreateIssuePopup';\r\n\r\nexport const CreateIssue: FC = () => {\r\n  const [openPopup, setOpenPopup] = useState<boolean>(false);\r\n  \r\n  return (\r\n    <Issue classes=\"CreateIssue\">\r\n      <div className=\"Issue__info\">\r\n        <h4 className=\"Issue__title\">Crete new Issue</h4>\r\n      </div>\r\n\r\n      <IconButton onClick={ () => setOpenPopup(true) }>\r\n        <AddIcon />\r\n      </IconButton>\r\n\r\n      <CreateIssuePopup open={ openPopup } onChangePopupState={ (open) => setOpenPopup(open) } />\r\n    </Issue>\r\n  );\r\n};\r\n","import './AboutPage.scss'\r\n\r\nconst AboutPage = () => {\r\n  return (\r\n    <div className=\"AboutPage\">\r\n      <div className=\"AboutPage_logo\"></div>\r\n      <div className=\"AboutPage_text\">\r\n        Planning poker, also called Scrum poker, is a consensus-based, gamified\r\n        technique for estimating, mostly used for timeboxing in Agile\r\n        principles. In planning poker, members of the group make estimates by\r\n        playing numbered cards face-down to the table, instead of speaking them\r\n        aloud. The cards are revealed, and the estimates are then discussed. By\r\n        hiding the figures in this way, the group can avoid the cognitive bias\r\n        of anchoring, where the first number spoken aloud sets a precedent for\r\n        subsequent estimates.\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AboutPage;\r\n","import { IssueInfo } from \"../../serverService/models/gameModel\";\r\nimport GameCard from \"../GameCard/GameCard\";\r\n\r\ninterface StatisticsItem {\r\n  cardInfo: {value: string, type: string,},\r\n  currentIssue?: IssueInfo\r\n}\r\n\r\nexport function StatisticsItem(props:StatisticsItem) {\r\n\r\n  return(\r\n    <li className=\"statistics__item\">\r\n      <GameCard value={props.cardInfo.value}/>\r\n      <span>{determPart(props.currentIssue?.votes.map((vote) => vote.score) || [], props.cardInfo.value)}%</span>\r\n    </li> \r\n  )\r\n}\r\n\r\nfunction determPart(votes:Array<string>, currentScore:string) {\r\n  let currentVotesAmount = 0;\r\n   votes.forEach((vote) => {\r\n     if(vote == currentScore) {\r\n      currentVotesAmount++;\r\n     }\r\n   })\r\n   return (Math.floor((currentVotesAmount/votes.length)*10000)) / 100;\r\n}","import { useTypedSelector } from \"../../hooky/useTypedSelector\";\r\nimport { CardProps } from \"../GameCard/GameCard\";\r\nimport { StatisticsItem } from \"./statisticsItem\";\r\nimport \"./statistics.scss\";\r\n\r\ninterface StatisticsProps {\r\n  issueId: string\r\n}\r\n\r\nexport function Statistics(props: StatisticsProps) {\r\n  const issuesInfo = useTypedSelector((store) => store.game.issuesInfo);\r\n  const currentIssue = issuesInfo.find((issueInfo) => issueInfo.issue.id === props.issueId);\r\n  const { shortScoreType } = useTypedSelector((store) => store.settings);\r\n\r\n  return(\r\n    <li className=\"statistics__item\">\r\n      <h2 className=\"statistics__issueInfo\">issue Id: {currentIssue?.issue.id}</h2>\r\n      <ul className=\"statistics__inner\">\r\n        {currentIssue?.votes.map((vote) => {\r\n          if(currentIssue?.votes.length !== 0) {\r\n            return <StatisticsItem cardInfo={{type:shortScoreType, value:vote.score}} currentIssue={currentIssue}/>\r\n          } else {\r\n            return <></>;\r\n          }\r\n        })}\r\n      </ul>\r\n    </li>\r\n  );\r\n}\r\n","import { FC } from 'react';\r\nimport { Redirect, Route, RouteComponentProps } from 'react-router';\r\nimport { BASE_URL } from '../../constants';\r\nimport IPrivateRouteProps from '../../types/PrivateRouteProps.type';\r\n\r\nexport const PrivateRoute: FC<IPrivateRouteProps> = (props: IPrivateRouteProps) => {\r\n  const { component, authed, ...rest } = props;\r\n  const Component = component as FC<RouteComponentProps>;\r\n\r\n  return (\r\n    <Route\r\n      { ...rest }\r\n      \r\n      render={\r\n        (routeProps) => authed === true\r\n          ? <Component { ...routeProps } />\r\n          : <Redirect to={{ pathname: BASE_URL, state: { from: routeProps.location } }} />\r\n      }\r\n    />\r\n  );\r\n};\r\n","import { Button, DialogActions } from '@material-ui/core';\r\nimport { useTypedSelector } from '../../hooky/useTypedSelector';\r\nimport { VotingModel } from '../../serverService/models/votingModel';\r\nimport ServerService from '../../serverService/serverService';\r\nimport \"./KickPlayerContainer\";\r\n\r\nexport const KickPlayerItem = (props: VotingModel) => {\r\n  const currentUserLogin = useTypedSelector((store) => store.userInfo.login);\r\n  const { message, whoOffer, whoKick, votes } = props;\r\n  let canCurrentUserVotin = false;\r\n\r\n  votes?.forEach((vote) => {\r\n    if(currentUserLogin === vote.login && vote.conclusion === null) {\r\n      canCurrentUserVotin = true;\r\n    }\r\n  })\r\n\r\n  if(currentUserLogin === whoKick || currentUserLogin === whoOffer) {\r\n    canCurrentUserVotin = false;\r\n  }\r\n\r\n  return (\r\n    <li className=\"KickPlayerPopUp\">\r\n      <p className=\"KickPlayerPopUp__title\">{whoOffer} offers kick player {whoKick}</p>\r\n      <p className=\"KickPlayerPopUp__text\">amountAgree: {props.amountAgree} / {votes?.length}</p>\r\n      <p className=\"KickPlayerPopUp__text\">{message}</p>\r\n\r\n      {canCurrentUserVotin ? \r\n      <DialogActions className=\"KickPlayerPopUp__btns\">\r\n        <Button onClick={ ()=> ServerService.setKickConclusion(true, currentUserLogin, whoKick) } variant=\"contained\" color=\"primary\" size=\"large\">Yes</Button>\r\n        <Button onClick={ ()=> ServerService.setKickConclusion(false, currentUserLogin, whoKick) } variant=\"outlined\" color=\"primary\" size=\"large\">No</Button>\r\n      </DialogActions> :\r\n      <></>\r\n      }\r\n\r\n    </li>\r\n  );\r\n};","import { useTypedSelector } from \"../../hooky/useTypedSelector\";\r\nimport { handleDragAndDrop } from \"../../tool/dragAndDrop\";\r\nimport { KickPlayerItem } from \"./KickPlayer\";\r\nimport \"./KickPlayer.scss\";\r\n\r\nexport function KickPlayerContainer() {\r\n  const votes = useTypedSelector((store) => store.voting);\r\n\r\n  return (\r\n    <ul className=\"KickPlayer__container draggable\" onMouseDown={handleDragAndDrop}>\r\n      { votes?.length !== 0\r\n        ? votes.map((vote) => <KickPlayerItem { ...vote } />)\r\n        : null\r\n      }\r\n    </ul>\r\n  )\r\n}","import { IssueModel } from \"../../../../serverService/models/issueModel\";\r\nimport { Issue } from \"../../../Base/Issue/Issue\";\r\nimport './IssueNonEditable.scss'\r\n\r\nconst IssueNonEdiitable = (props: IssueModel) => {\r\n  const { title, priority, link, id } = props;\r\n  return (\r\n    <Issue classes=\"IssueEditable IssueNonEditable\">\r\n      <div className=\"Issue__info\">\r\n        <a className=\"Issue__title\" href={link} target=\"_blank\">\r\n          {title}\r\n        </a>\r\n        <span className=\"Issue__priority\">{priority}</span>\r\n      </div>\r\n    </Issue>\r\n  );\r\n};\r\n\r\nexport default IssueNonEdiitable;\r\n","import { useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport { BASE_URL } from \"../../../../constants\";\r\nimport { useTypedSelector } from \"../../../../hooky/useTypedSelector\";\r\nimport ServerService from \"../../../../serverService/serverService\";\r\nimport { resetChat } from \"../../../../store/chatSlice\";\r\nimport { resetRoomInfo } from \"../../../../store/roomSlice\";\r\nimport Chat from \"../../../Chat/Chat\";\r\nimport { CreateIssue } from \"../../../CreateIssue/CreateIssue\";\r\nimport { KickPlayerContainer } from \"../../../KickPlayer/KickPlayerContainer\";\r\nimport IssueNonEdiitable from \"../IssueNonEditable/IssueNonEditable\";\r\nimport PlayerCard from \"../PlayerCard/PlayerCard\";\r\nimport { Queue } from \"../Queue/queue\";\r\nimport \"./LobbyMain.scss\";\r\n\r\nconst LobbyMain = () => {\r\n  const roomInfo = useTypedSelector((store) => store.roomInfo);\r\n  const userInfo = useTypedSelector((store) => store.userInfo);\r\n  const dispatch = useDispatch();\r\n  const router = useHistory();\r\n  ServerService.setDispatch(dispatch);\r\n  ServerService.setRouter(router);\r\n\r\n  const onDisconnectBtnClick = () => {\r\n    ServerService.disconect(\r\n      userInfo,\r\n      roomInfo.roomId,\r\n      `user ${userInfo.login} disconnect the room`\r\n    );\r\n    dispatch(resetRoomInfo());\r\n    dispatch(resetChat());\r\n    router.push(`${BASE_URL}/welcomePage`);\r\n  };\r\n\r\n  const onStartGameBtnClick = () => {\r\n    ServerService.startGame();\r\n  };\r\n\r\n  //TODO на страничку нужно разместить url инвайта roomInfo.roomUrl\r\n  return (\r\n    <div className=\"Lobby__main\">\r\n      <Chat />\r\n      <Queue />\r\n      <KickPlayerContainer></KickPlayerContainer>\r\n      <div className=\"Lobby__master\">\r\n        <div className=\"Lobby__master_title\">Scrum master:</div>\r\n        <div onClick={onStartGameBtnClick} className=\"Lobby__start-btn\">\r\n          <div></div>\r\n        </div>\r\n        <PlayerCard\r\n          {...roomInfo.scrumInfo}\r\n          avatar={roomInfo.scrumInfo.avatar}\r\n        />\r\n        <div className=\"Lobby__exit-btn\">\r\n          <div onClick={onDisconnectBtnClick}></div>\r\n        </div>\r\n      </div>\r\n      <div className=\"Lobby__issues\">\r\n        {userInfo.isScrum && <CreateIssue />}\r\n        {roomInfo.issues.length !== 0 &&\r\n          roomInfo.issues.map((issue) => <IssueNonEdiitable {...issue} />)}\r\n      </div>\r\n      <h1>{roomInfo.roomUrl}</h1>\r\n      <div className=\"Lobby__members\">\r\n        <div className=\"Lobby__members_title\">Members:</div>\r\n        <div className=\"Lobby__members_cards\">\r\n          {roomInfo.inGame.map((player) => {\r\n            return <PlayerCard {...player} avatar={player.avatar} />;\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LobbyMain;\r\n","import './SuccessSnackBar.scss';\r\nimport { FC } from 'react';\r\nimport { Alert, Snackbar } from '@mui/material';\r\nimport ISuccessSnackBarProps from '../../../types/SuccessSnackBarProps.type';\r\n\r\nexport const SuccessSnackBar: FC<ISuccessSnackBarProps> = (props: ISuccessSnackBarProps) => {\r\n  const { open, onSetOpen, text } = props;\r\n\r\n  return (\r\n    <Snackbar open={ open } autoHideDuration={ 6000 } onClose={ () => onSetOpen(false) }>\r\n      <Alert onClose={ () => onSetOpen(false) } severity=\"success\">\r\n        { text }\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n}","import { ChangeEvent } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useTypedSelector } from \"../../../../hooky/useTypedSelector\";\r\nimport { updateCard } from \"../../../../store/settingsSlice\";\r\nimport { CardProps } from \"../../../GameCard/GameCard\";\r\nimport \"./CardEditable.scss\";\r\n\r\n\r\nconst EditableGameCard = (props: CardProps) => {\r\n  const { value } = props;\r\n  let currentValue = value;\r\n  const type = useTypedSelector((store) => store.settings.shortScoreType);\r\n  const dispatch = useDispatch();\r\n  // const { issuesInfo, isVoting } = useTypedSelector(store => store.game);\r\n  // const { login } = useTypedSelector(store => store.userInfo);\r\n\r\n  // const onChooseCard = () => {\r\n  //   if(isVoting) {\r\n  //     const currentIssueInfo = issuesInfo.find((issue) => issue.isSelected);\r\n  //     if(currentIssueInfo) {\r\n  //       const choiceInfo:ChoiceModel = {\r\n  //         issueId: currentIssueInfo.issue.id,\r\n  //         login: login,\r\n  //         score: props.value\r\n  //       }\r\n  //       ServerService.makeChoice(choiceInfo);\r\n  //     }\r\n  //   }\r\n  //\r\n  const handleValue = () => {\r\n      dispatch(updateCard({currentValue,value}))\r\n  };\r\n\r\n  return (\r\n    <div className=\"card-container CardEditable\">\r\n      <div className=\"GameCard\">\r\n        <div className=\"GameCard_front\">\r\n          <div className=\"GameCard_type\">{type}</div>\r\n          <input\r\n            className=\"GameCard_value-input\"\r\n            defaultValue={value}\r\n            onChange={handleValue}\r\n          ></input>\r\n          <div className=\"GameCard_type GameCard_type__reverse\">{type}</div>\r\n        </div>\r\n        <div className=\"GameCard_back\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditableGameCard;\r\n","import { Button, DialogActions, TextField } from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addCard } from \"../../../../store/settingsSlice\";\r\nimport { PopUpLinearProgress } from \"../../../Base/PopUpLinearProgress/PopUpLinearProgress\";\r\nimport { CardPopupProps } from \"../CardSettings/CardCreator/CreateCardPopup/CreateCardPopup\";\r\n\r\nexport const CardPopup = (props: CardPopupProps) => {\r\n  const { open, onChangePopupState } = props;\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const dispatch = useDispatch();\r\n  const [value, setValue] = useState<string>();\r\n\r\n  const resetFields = (): void => {\r\n    setValue(\"\");\r\n  };\r\n\r\n  const handleCard = (): void => {\r\n    setLoading(true);\r\n    setLoading(false);\r\n    onChangePopupState(false);\r\n    dispatch(addCard(value))\r\n  };\r\n\r\n  return (\r\n    <PopUpLinearProgress\r\n      className={`IssuePopup`}\r\n      open={open}\r\n      onClose={() => onChangePopupState(false)}\r\n      loading={loading}\r\n    >\r\n      <form>\r\n        <h3 className=\"IssuePopup__title\">Card</h3>\r\n\r\n        <label className=\"IssuePopup__box\">\r\n          <span className=\"IssuePopup__boxTitle\">Value:</span>\r\n          <TextField\r\n            className=\"IssuePopup__field\"\r\n            defaultValue={value}\r\n            onChange={(e) => setValue(e.target.value)}\r\n            name=\"title\"\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n          />\r\n        </label>\r\n\r\n        <DialogActions className=\"IssuePopup__btns\">\r\n          <Button\r\n            onClick={handleCard}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"large\"\r\n          >\r\n            Confirm\r\n          </Button>\r\n          <Button\r\n            onClick={() => onChangePopupState(false)}\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            size=\"large\"\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </DialogActions>\r\n      </form>\r\n    </PopUpLinearProgress>\r\n  );\r\n};\r\n","import { CardPopup } from \"../../../CardPopup/CardPopup\";\r\n\r\nexport interface CardPopupProps {\r\n    open: boolean;\r\n    onChangePopupState: (open: boolean) => void;\r\n}\r\nexport const CreateCardPopup = (props: CardPopupProps) => {\r\n    return (\r\n      <CardPopup { ...props } />\r\n    );\r\n  };","import { IconButton } from \"@material-ui/core\";\r\nimport { AddCircleOutline, PlusOne } from \"@material-ui/icons\";\r\nimport { useState } from \"react\";\r\nimport \"./CardCreator.scss\";\r\nimport { CreateCardPopup } from \"./CreateCardPopup/CreateCardPopup\";\r\n\r\nconst CardCreator = () => {\r\n  const [openPopup, setOpenPopup] = useState<boolean>(false);\r\n\r\n  return (\r\n    <div className=\"card-container\">\r\n      <div className=\"GameCard\">\r\n        <div className=\"GameCard_front\">\r\n          <div className=\"GameCard_add\">\r\n            <IconButton  onClick={() => setOpenPopup(true)}>\r\n              <AddCircleOutline fontSize=\"large\" />\r\n            </IconButton>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <CreateCardPopup\r\n        open={openPopup}\r\n        onChangePopupState={setOpenPopup}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardCreator;\r\n","import { useState } from \"react\";\r\nimport { useTypedSelector } from \"../../../../hooky/useTypedSelector\";\r\nimport GameCard from \"../../../GameCard/GameCard\";\r\nimport CardEditable from \"../CardEditable/CardEditable\";\r\nimport CardCreator from \"./CardCreator/CardCreator\";\r\nimport \"./CardSettings.scss\";\r\n\r\nexport interface CardSettingsProps {\r\n  cards: Array<string>,\r\n}\r\n\r\nconst CardSettings = (props:CardSettingsProps) => {\r\n  const { cards } = props;\r\n  const settings = useTypedSelector((store) => store.settings);\r\n\r\n  return (\r\n    <div className=\"CardSettings\">\r\n      <div className=\"CardSettings__wrapper\">\r\n        <div className=\"CardSettings__cards\">\r\n          {cards.map((card) => (\r\n            <CardEditable\r\n              value={card}\r\n            />\r\n          ))}\r\n        </div>\r\n        <div className=\"CardSettings__add\">\r\n          <CardCreator/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardSettings;\r\n","import './RoundTimeEditable.scss';\r\nimport { FC } from 'react';\r\nimport { RoundTime } from '../Base/RoundTime/RoundTime';\r\nimport { IRoundTimeEditableProps, IRoundTimeEditableChangeTimeParams } from '../../types/RoundTimeEditable.type';\r\n\r\nexport const RoundTimeEditable: FC<IRoundTimeEditableProps> = (props: IRoundTimeEditableProps) => {\r\n  const { seconds, setSeconds, minutes, setMinutes } = props;\r\n\r\n  const changeTime = ({ e, changeState }: IRoundTimeEditableChangeTimeParams): void => {\r\n    const { value } = e.target;\r\n    \r\n    if (value.length > 2) return;\r\n\r\n    changeState(+value);\r\n  };\r\n\r\n  return (\r\n    <RoundTime classes=\"RoundTimeEditable\">\r\n      <input className=\"RoundTime__time\" value={ minutes } onChange={ (e) => changeTime({ e, changeState: setMinutes } as IRoundTimeEditableChangeTimeParams) } type=\"number\" min=\"0\" />\r\n      :\r\n      <input className=\"RoundTime__time\" value={ seconds } onChange={ (e) => changeTime({ e, changeState: setSeconds } as IRoundTimeEditableChangeTimeParams) } type=\"number\" min=\"0\" max=\"59\" />\r\n    </RoundTime>\r\n  );\r\n};","import { Switch, TextField } from \"@material-ui/core\";\r\nimport { ChangeEvent, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useTypedSelector } from \"../../../hooky/useTypedSelector\";\r\nimport ServerService from \"../../../serverService/serverService\";\r\nimport { setCardType, SettingsModel } from \"../../../store/settingsSlice\";\r\nimport { SuccessSnackBar } from \"../../Base/SuccessSnackBar/SuccessSnackBar\";\r\nimport { CreateIssue } from \"../../CreateIssue/CreateIssue\";\r\nimport CardSettings from \"../../pages/Lobby/CardSettings/CardSettings\";\r\nimport { IssueEditable } from \"../../pages/Lobby/IssueEditable/IssueEditable\";\r\nimport { RoundTimeEditable } from \"../../RoundTimeEditable/RoundTimeEditable\";\r\nimport \"./GameSettings.scss\";\r\n\r\nconst GameSettings = () => {\r\n  const [MasterAsPlayer, SetMasterAsPlayer] = useState(false);\r\n  const [AutoTurn, SetAutoTurn] = useState(false);\r\n  const [TimerNeeded, SetTimerNeeded] = useState(false);\r\n  const [ScoreType, setScoreType] = useState(\"Story Points\");\r\n  const [ShortScoreType, setShortScoreType] = useState(\"SP\");\r\n  const [seconds, setSeconds] = useState<number>(40);\r\n  const [minutes, setMinutes] = useState<number>(0);\r\n  const cards = useTypedSelector((store) => store.settings.cards);\r\n  const dispatch = useDispatch();\r\n\r\n  const [openLogInSuccessSnackBar, setOpenLogInSuccessSnackBar] =\r\n    useState<boolean>(false);\r\n\r\n  const { issues } = useTypedSelector((store) => store.roomInfo);\r\n\r\n  //! сделать как один обьект типа SettingsModel\r\n  const handleMaster = () => {\r\n    SetMasterAsPlayer(!MasterAsPlayer);\r\n  };\r\n  const handleTurn = () => {\r\n    SetAutoTurn(!AutoTurn);\r\n  };\r\n  const handleTimer = () => {\r\n    SetTimerNeeded(!TimerNeeded);\r\n  };\r\n  const handleScoreType = (event: ChangeEvent) => {\r\n    setScoreType((event.target as HTMLInputElement).value);\r\n  };\r\n\r\n  const handleShortScoreType = (event: ChangeEvent) => {\r\n    const value = (event.target as HTMLInputElement).value;\r\n    dispatch(setCardType(value));\r\n    setShortScoreType(value);\r\n  };\r\n\r\n  const onSaveBtnClick = () => {\r\n    const settings: SettingsModel = {\r\n      autoTurn: AutoTurn,\r\n      masterAsPlayer: MasterAsPlayer,\r\n      roundTime: minutes * 60 + seconds,\r\n      scoreType: ScoreType,\r\n      shortScoreType: ShortScoreType,\r\n      timerNeeded: TimerNeeded,\r\n      cards: cards,\r\n    };\r\n    ServerService.setSettings(settings);\r\n\r\n    setOpenLogInSuccessSnackBar(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"GameSettings\">\r\n      <h3 className=\"GameSettings__title\">Game Settings</h3>\r\n      <div className=\"GameSettings__wrapper\">\r\n        <div className=\"GameSettings__main\">\r\n          <div className=\"GameSettings__element\">\r\n            <div className=\"GameSettings__element_title\">\r\n              Scrum master as player:\r\n            </div>\r\n            <Switch onChange={handleMaster}></Switch>\r\n          </div>\r\n          <div className=\"GameSettings__element\">\r\n            <div className=\"GameSettings__element_title\">\r\n              Changing card in round end:\r\n            </div>\r\n            <Switch onChange={handleTurn}></Switch>\r\n          </div>\r\n          <div className=\"GameSettings__element\">\r\n            <div className=\"GameSettings__element_title\">Is timer needed:</div>\r\n            <Switch onChange={handleTimer}></Switch>\r\n          </div>\r\n          <div className=\"GameSettings__element\">\r\n            <div className=\"GameSettings__element_title\">Score type:</div>\r\n            <TextField\r\n              defaultValue=\"Story Points\"\r\n              onChange={handleScoreType}\r\n            ></TextField>\r\n          </div>\r\n          <div className=\"GameSettings__element\">\r\n            <div className=\"GameSettings__element_title\">\r\n              Score type(short):\r\n            </div>\r\n            <TextField\r\n              defaultValue=\"SP\"\r\n              onChange={handleShortScoreType}\r\n            ></TextField>\r\n          </div>\r\n          <div className=\"GameSettings__element\">\r\n            <div className=\"GameSettings__element_title\">Round time:</div>\r\n            <RoundTimeEditable\r\n              seconds={seconds}\r\n              setSeconds={setSeconds}\r\n              minutes={minutes}\r\n              setMinutes={setMinutes}\r\n            />\r\n          </div>\r\n          <button className=\"GameSettings__save\" onClick={onSaveBtnClick}>\r\n            save\r\n          </button>\r\n        </div>\r\n        <CardSettings cards={cards} />\r\n      </div>\r\n\r\n      <SuccessSnackBar\r\n        open={openLogInSuccessSnackBar}\r\n        onSetOpen={setOpenLogInSuccessSnackBar}\r\n        text=\"Settings successfully saved!\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameSettings;\r\n","import { useTypedSelector } from \"../../hooky/useTypedSelector\";\r\nimport GameSettings from \"./GameSettings/GameSettings\";\r\n\r\nconst Settings = () => {\r\n  const link = useTypedSelector((store) => store.roomInfo.roomUrl);\r\n  const handleCopy = (event: any) => {\r\n    event.target.previousElementSibling?.select();\r\n    document.execCommand(\"copy\");\r\n  };\r\n  return (\r\n    <div className=\"Settings\">\r\n      <div className=\"Settings__connect\">\r\n        {/* <div className=\"Settings__connect_text\">Link to lobby:</div>\r\n        <div className=\"Settings__connect_link\">{link}</div>\r\n        <button className=\"Settings__connect_copy\" onClick={handleCopy}>\r\n          Copy\r\n        </button> */}\r\n      </div>\r\n      <GameSettings />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","import { Link, Route } from \"react-router-dom\";\r\nimport LobbyMain from \"../LobbyGame/LobbyMain\";\r\nimport Settings from \"../../../Settings/Settings\";\r\nimport \"./Lobby.scss\";\r\nimport { useTypedSelector } from \"../../../../hooky/useTypedSelector\";\r\nimport { CSSProperties } from \"@mui/system\";\r\n\r\nconst Lobby = () => {\r\n  //! Убрать имя лобби (чья компонента напишите Мише)\r\n\r\n  const isScrum = useTypedSelector((store) => store.userInfo.isScrum);\r\n  let link;\r\n  let style;\r\n  if (isScrum) {\r\n    link = (\r\n      <Link to={`/lobby/settings`} className=\"Lobby__link\">\r\n        Settings\r\n      </Link>\r\n    );\r\n    style = {};\r\n  } else {\r\n    link = null;\r\n    style = { justifyContent: \"center\" };\r\n  }\r\n\r\n  return (\r\n    <div className=\"Lobby\">\r\n      <div className=\"Lobby__wrapper\">\r\n        <div className=\"Lobby__routing\" style={style}>\r\n          <Link to={`/lobbyStart`} className=\"Lobby__link\">\r\n            Lobby\r\n          </Link>\r\n          {link}\r\n        </div>\r\n        <Route exact path={`/lobbyStart`}>\r\n          <LobbyMain />\r\n        </Route>\r\n        <Route exact path={`/lobby/settings`}>\r\n          <Settings />\r\n        </Route>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n//! Мб вынести роут в AppRouter.tsx?\r\n\r\nexport default Lobby;\r\n","import { Route, Switch } from \"react-router-dom\";\r\nimport { StartPage } from \"./components/pages/StartPage/StartPage\";\r\nimport { WelcomePage } from \"./components/pages/WelcomePage/WelcomePage\";\r\nimport { Game } from \"./components/pages/GamePage/Game/Game\";\r\nimport { useTypedSelector } from \"./hooky/useTypedSelector\";\r\nimport AboutPage from \"./components/pages/AboutPage/AboutPage\";\r\nimport { StatisticsPage } from \"./components/pages/StatisticsPage/StatisticsPage\";\r\nimport { PrivateRoute } from \"./components/Base/PrivateRoute\";\r\nimport Lobby from \"./components/pages/Lobby/LobbyStart/Lobby\";\r\nimport { BASE_URL } from \"./constants\";\r\n\r\nconst ROUTES = [\r\n  { path: `${BASE_URL}/welcomePage`, Component: WelcomePage },\r\n  { path: `${BASE_URL}/planning-poker/lobbyStart`, Component: Lobby },\r\n  { path: `${BASE_URL}/planning-poker/lobby/settings`, Component: Lobby },\r\n  { path: `${BASE_URL}/planning-poker/game`, Component: Game },\r\n  { path: `${BASE_URL}/planning-poker/statistics`, Component: StatisticsPage }\r\n];\r\n\r\nexport default function AppRouter() {\r\n  const { isLogin } = useTypedSelector((state) => state.userInfo);\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path={ BASE_URL } component={ StartPage } exact />\r\n      <Route path={ `${BASE_URL}/about` } component={ AboutPage } exact />\r\n\r\n      { ROUTES.map(({ path, Component }) => (\r\n          <PrivateRoute authed={ isLogin || false } path={ path } component={ Component } exact key={ path } />\r\n        ))\r\n      }\r\n    </Switch>\r\n  );\r\n}","import { FC, useEffect, useState } from \"react\";\r\nimport \"./Game.scss\";\r\nimport { useTypedSelector } from \"../../../../hooky/useTypedSelector\";\r\nimport PlayerCard from \"../../Lobby/PlayerCard/PlayerCard\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { GameIssue } from \"../GameIssue/GameIssue\";\r\nimport Chat from \"../../../Chat/Chat\";\r\nimport { Queue } from \"../../Lobby/Queue/queue\";\r\nimport ServerService from \"../../../../serverService/serverService\";\r\nimport GameCard, { CardProps } from \"../../../GameCard/GameCard\";\r\nimport { GameSideBar } from \"../GameSideBar/GameSideBar\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { resetRoomInfo } from \"../../../../store/roomSlice\";\r\nimport { resetChat } from \"../../../../store/chatSlice\";\r\nimport { useHistory } from \"react-router\";\r\nimport { RoundTimePlayable } from \"../../../RoundTimePlayable/RoundTimePlayable\";\r\nimport { CreateIssue } from \"../../../CreateIssue/CreateIssue\";\r\nimport { UserInfo } from \"../../../../serverService/models/userInfoModel\";\r\nimport { BASE_URL } from \"../../../../constants\";\r\n\r\nexport const Game: FC = () => {\r\n  const userInfo = useTypedSelector((store) => store.userInfo);\r\n  const { scrumInfo, roomId, queue } = useTypedSelector((store) => store.roomInfo);\r\n  const { issuesInfo, isVoting } = useTypedSelector((store) => store.game);\r\n  const dispatch = useDispatch();\r\n  const router = useHistory();\r\n  const isScrum = userInfo.isScrum;\r\n  const cards = useTypedSelector((store) => store.settings.cards);\r\n  const {timerNeeded, masterAsPlayer} = useTypedSelector((store) => store.settings);\r\n  const [PlayerInQueue, setPlayerInQueue] = useState(true);\r\n\r\n  useEffect(() => {\r\n    setPlayerInQueue(determIsPlayerInQueue(queue, userInfo.login));\r\n  }, [queue])\r\n\r\n  const onStopGameBtnClick = () => {\r\n    ServerService.stopGame();\r\n  };\r\n\r\n  const onIssueClick = (issueId: string) => {\r\n    if (isScrum) {\r\n      const votingIssue = issuesInfo.find((ussueInfo) => ussueInfo.isVoting);\r\n      if (!votingIssue) {\r\n        ServerService.selectIssue(issueId);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onRunIssueBtnClick = () => {\r\n    const currentIssueInfo = issuesInfo.find((issue) => issue.isSelected);\r\n    if (currentIssueInfo) {\r\n      ServerService.startVoteIssue(currentIssueInfo.issue.id);\r\n    } else {\r\n      alert(\"Сначала выберите issue\");\r\n    }\r\n  };\r\n\r\n  const onResetIssueBtnClick = () => {\r\n    const currentIssueInfo = issuesInfo.find((issue) => issue.isSelected);\r\n    if (currentIssueInfo) {\r\n      ServerService.resetVoteIssue(currentIssueInfo.issue.id);\r\n    } else {\r\n      alert(\"нечего сбрасывать :(\");\r\n    }\r\n  };\r\n\r\n  const onStopIssueBtnClick = () => {\r\n    const currentIssueInfo = issuesInfo.find((issue) => issue.isSelected);\r\n    if (currentIssueInfo) {\r\n      ServerService.stopVoteIssue(currentIssueInfo.issue.id);\r\n    }\r\n  };\r\n\r\n  const onExitBtnClick = () => {\r\n    ServerService.disconect(\r\n      userInfo,\r\n      roomId,\r\n      `user ${userInfo.login} disconnect the room`\r\n    );\r\n    dispatch(resetRoomInfo());\r\n    dispatch(resetChat());\r\n    router.push(`${BASE_URL}/welcomePage`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Game page__content\">\r\n      {isScrum ? <Queue></Queue> : <></>}\r\n      <Chat></Chat>\r\n\r\n      <div className=\"Game__main\">\r\n        <h2 className=\"Game__title\">Some random game name</h2>\r\n\r\n        <div className=\"Game__topPanel\">\r\n          <div className=\"Game__master\">\r\n            <span className=\"Game__masterTitle\">Scrum master:</span>\r\n\r\n            <PlayerCard\r\n              {...scrumInfo}\r\n              avatar={scrumInfo.avatar || \"./logo192.png\"}\r\n              login=\"\"\r\n            />\r\n          </div>\r\n\r\n          {isScrum ? (\r\n            <Button\r\n              className=\"Game__stopBtn\"\r\n              onClick={onStopGameBtnClick}\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              size=\"large\"\r\n            >\r\n              Stop Game\r\n            </Button>\r\n          ) : (\r\n            <>\r\n              {timerNeeded ? <RoundTimePlayable /> : <></>}\r\n              <Button\r\n                className=\"Game__exitBtn\"\r\n                onClick={onExitBtnClick}\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                size=\"large\"\r\n              >\r\n                Exit\r\n              </Button>\r\n            </>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"Game__playground\">\r\n          <div className=\"Game__dashboardLeft\">\r\n            {issuesInfo.length ? (\r\n              <div className=\"Game__issues\">\r\n                <h3 className=\"Game__issuesTitle Game__subtitle\">Issues:</h3>\r\n\r\n                <ul className=\"Game__issuesContainer\">\r\n                  {issuesInfo.map((issueInfo) => (\r\n                    <li\r\n                      onClick={() => onIssueClick(issueInfo.issue.id)}\r\n                      key={issueInfo.issue.id}\r\n                    >\r\n                      <GameIssue\r\n                        {...issueInfo.issue}\r\n                        isActive={issueInfo.isSelected}\r\n                        isVoting={issueInfo.isVoting}\r\n                        score={issueInfo.result}\r\n                      />\r\n                    </li>\r\n                  ))}\r\n                  {isScrum && <CreateIssue />}\r\n                </ul>\r\n              </div>\r\n            ) : null}\r\n\r\n            {isScrum && (\r\n              <div className=\"Game__statistics\">\r\n                <h3 className=\"Game__subtitle\">Statistics:</h3>\r\n                <div className=\"Game__statisticsContainer\"></div>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {isScrum && (\r\n            <div className=\"Game__dashboardRight\">\r\n              <>\r\n                {timerNeeded ? <RoundTimePlayable /> : <></>}\r\n\r\n                <div className=\"Game__playgroundBtns\">\r\n                  {!isVoting && (\r\n                    <>\r\n                      <Button\r\n                        className=\"Game__runRoundBtn\"\r\n                        onClick={onRunIssueBtnClick}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        size=\"large\"\r\n                      >\r\n                        Run round\r\n                      </Button>\r\n                      <Button\r\n                        className=\"Game__restartRoundBtn\"\r\n                        onClick={onResetIssueBtnClick}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        size=\"large\"\r\n                      >\r\n                        Restart round\r\n                      </Button>\r\n                    </>\r\n                  )}\r\n                  {isVoting && (\r\n                    <Button\r\n                      className=\"Game__nextIssueBtn\"\r\n                      onClick={onStopIssueBtnClick}\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      size=\"large\"\r\n                    >\r\n                      Stop round\r\n                    </Button>\r\n                  )}\r\n                </div>\r\n              </>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"Game__cards\">\r\n        {!PlayerInQueue ?\r\n            isScrum ? \r\n              masterAsPlayer ? \r\n              cards.map((card) => <GameCard value={card} ></GameCard>) :\r\n              <></>:\r\n            cards.map((card) => <GameCard value={card} ></GameCard>) :\r\n          <></>\r\n        }\r\n        </div>\r\n      </div>\r\n\r\n      <GameSideBar></GameSideBar>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction determIsPlayerInQueue(queue:Array<UserInfo>, userLogin:string) {\r\n  for(let i=0; i<queue.length; i++) {\r\n    if(queue[i].login === userLogin) {\r\n      return true\r\n    } \r\n  }\r\n  return false;\r\n}","import { useTypedSelector } from \"../../../hooky/useTypedSelector\"\r\nimport { Statistics } from \"../../statistics/statistics\";\r\nimport \"./Statistics.scss\";\r\n\r\nexport function StatisticsPage() {\r\n  const issusInfo = useTypedSelector((store) => store.game.issuesInfo);\r\n  return(\r\n    <div className=\"statisticsPage\">\r\n      <div className=\"statistics__title\">\r\n        Statistics\r\n      </div>\r\n      <ul className=\"statistics__wrapper\">\r\n        {issusInfo.map((issueInfo) => <Statistics  issueId={issueInfo.issue.id}/>)}\r\n      </ul>\r\n    </div>\r\n  )\r\n}","export default __webpack_public_path__ + \"static/media/rsschool.fee9d91c.svg\";","import './Footer.scss';\r\nimport { FC } from 'react';\r\nimport { APP_AUTHORS_GITHUB_USERNAME } from '../../constants';\r\nimport rsschool from '../../assets/icons/rsschool.svg';\r\n\r\nexport const Footer: FC = () => {\r\n  return (\r\n    <footer className=\"Footer\">\r\n      <div className=\"Footer__container\">\r\n        <a className=\"Footer__rss\" href=\"https://rs.school/js/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <img src={ rsschool } alt=\"RS School\" />\r\n          <span>'21</span>\r\n        </a>\r\n        \r\n        <ul className=\"Footer__githubList\">\r\n          {\r\n            APP_AUTHORS_GITHUB_USERNAME.map((username) => (\r\n              <li key={ username }>\r\n                <a href={ `https://github.com/${ username }`} target=\"_blank\" rel=\"noopener noreferrer\">&copy;{ username }</a>\r\n              </li>\r\n            ))\r\n          }\r\n        </ul>\r\n      </div>\r\n    </footer>\r\n  );\r\n};","import \"./App.scss\";\r\nimport { ThemeProvider } from \"@material-ui/core\";\r\nimport { theme } from \"./material-ui-variables\";\r\nimport { CssBaseline } from \"@material-ui/core\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport Header from \"./components/Header/Header\";\r\nimport AppRouter from \"./AppRouter\";\r\nimport { Footer } from './components/Footer/Footer';\r\nimport { useTypedSelector } from \"./hooky/useTypedSelector\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { SuccessSnackBar } from \"./components/Base/SuccessSnackBar/SuccessSnackBar\";\r\n\r\nfunction App() {\r\n  const user = useTypedSelector((state) => state.userInfo);\r\n  const [openLogInSuccessSnackBar, setOpenLogInSuccessSnackBar] = useState<boolean>(false);\r\n  \r\n  useEffect(() => {\r\n    if (user.isLogin) {\r\n      setOpenLogInSuccessSnackBar(true);\r\n    }\r\n  }, [user.isLogin]);\r\n  \r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <BrowserRouter>\r\n        <div className=\"App\">\r\n          <Header></Header>\r\n\r\n          <main>\r\n            <AppRouter></AppRouter>\r\n          </main>\r\n          \r\n          <Footer />\r\n\r\n          <SuccessSnackBar open={ openLogInSuccessSnackBar } onSetOpen={ setOpenLogInSuccessSnackBar } text=\"You are successfully logged in!\" />\r\n        </div>\r\n      </BrowserRouter>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { combineReducers } from \"redux\";\r\nimport chatSlice from \"./chatSlice\";\r\nimport currentUserSlice from \"./currentUserSlice\";\r\nimport gameSlice from \"./gameSlice\";\r\nimport roomSlice from \"./roomSlice\";\r\nimport settingsSlice from \"./settingsSlice\";\r\nimport votingSlice from \"./votingSlice\";\r\n\r\nconst rootReducer = combineReducers({\r\n  userInfo: currentUserSlice,\r\n  roomInfo: roomSlice,\r\n  chat: chatSlice,\r\n  voting: votingSlice,\r\n  game: gameSlice,\r\n  settings: settingsSlice,\r\n})\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store/rootReducer';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider> ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}